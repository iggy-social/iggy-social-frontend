import{_ as L,W as m,i as $,l as k,m as w,n as W,c as u,o as d,a as o,t as r,p as C,v as B,g as p,q as E,s as N,d as g,x as _,y as M,z as I,A as q,B as V,C as v,j as f,D,F as P,E as F,r as x,b,w as U,T as j,M as Y,H as O,G as R}from"#entry";const X={name:"StakingClaim",props:["loadingStakingData","claimAmountWei","claimRewardsTotalWei","futureRewardsWei","lastClaimPeriod","minDepositWei","periodLength"],emits:["clearClaimAmount","updateLastClaimPeriod"],data(){return{claimers:[],waiting:!1}},components:{WaitingToast:m},computed:{claimAmount(){return this.claimAmountWei===null||this.claimAmountWei===void 0||this.claimAmountWei===""||this.claimAmountWei==0?0:W(BigInt(this.claimAmountWei))},claimRewardsTotal(){return this.claimRewardsTotalWei===null||this.claimRewardsTotalWei===void 0||this.claimRewardsTotalWei===""||this.claimRewardsTotalWei==0?0:W(BigInt(this.claimRewardsTotalWei))},futureRewards(){return this.futureRewardsWei===null||this.futureRewardsWei===void 0||this.futureRewardsWei===""||this.futureRewardsWei==0?0:W(BigInt(this.futureRewardsWei))},lastPeriodDateTime(){if(this.lastClaimPeriod===null||this.lastClaimPeriod===void 0||this.lastClaimPeriod===""||this.lastClaimPeriod==0)return"Not available";try{const t=Number(this.lastClaimPeriod),e=new Date(t*1e3),a=new Intl.DateTimeFormat("en",{month:"short"}).format(e);return e.getDate()+" "+a+" "+e.getFullYear()+" "+e.getHours()+":"+e.getMinutes().toString().padStart(2,"0")}catch(t){return console.error("Error formatting lastPeriodDateTime:",t),"Invalid date"}},lastPeriodUpdateNeeded(){if(this.lastClaimPeriod===null||this.lastClaimPeriod===void 0||this.lastClaimPeriod===""||this.lastClaimPeriod==0||this.periodLength===null||this.periodLength===void 0||this.periodLength===""||this.periodLength==0)return!1;try{const t=Number(this.lastClaimPeriod),e=Number(this.periodLength);return Math.floor(Date.now()/1e3)-(t+e)>0}catch(t){return console.error("Error calculating lastPeriodUpdateNeeded:",t),!1}},minDeposit(){return this.minDepositWei===null||this.minDepositWei===void 0||this.minDepositWei===""||this.minDepositWei==0?0:W(BigInt(this.minDepositWei))},periodLengthHumanReadable(){if(this.periodLength===null||this.periodLength===void 0||this.periodLength===""||this.periodLength==0)return null;const t=Number(this.periodLength),e=Math.floor(t/60),a=Math.floor(e/60),i=Math.floor(a/24);return i>0?`${i} days`:a>0?`${a} hours`:e>0?`${e} minutes`:`${t} seconds`},stakeTokenBalance(){return 0}},methods:{async claim(){const t=this.toast({component:m,props:{text:"Please confirm the transaction."}},{type:"info"});this.waiting=!0;let e;try{const a={address:this.$config.public.stakingContractAddress,abi:[{name:"claimRewards",type:"function",stateMutability:"nonpayable",inputs:[],outputs:[{name:"",type:"uint256",internalType:"uint256"}]}],functionName:"claimRewards",args:[]},i=await k(a);this.toast.dismiss(t),e=this.toast({component:m,props:{text:"Please wait for your transaction to confirm. Click on this notification to see transaction in the block explorer."}},{type:"info",onClick:()=>window.open(this.$config.public.blockExplorerBaseUrl+"/tx/"+i,"_blank").focus()});const s=await w(i);s.status==="success"?(this.$emit("clearClaimAmount"),this.$emit("updateLastClaimPeriod"),this.toast.dismiss(e),this.toast("You have successfully claimed rewards!",{type:"success",onClick:()=>window.open(this.$config.public.blockExplorerBaseUrl+"/tx/"+i,"_blank").focus()}),this.waiting=!1):(this.toast.dismiss(e),this.waiting=!1,this.toast("Transaction has failed.",{type:"error",onClick:()=>window.open(this.$config.public.blockExplorerBaseUrl+"/tx/"+i,"_blank").focus()}),console.log(s))}catch(a){try{let i=a.message.split("Details:")[1];i=i.split("Version: viem")[0],i=i.replace(/"/g,""),i=i.replace("execution reverted:","Error:"),console.log(i),this.toast(i,{type:"error"})}catch{this.toast("Transaction has failed.",{type:"error"})}this.waiting=!1}finally{this.toast.dismiss(t),this.toast.dismiss(e),this.waiting=!1}}},setup(){return{toast:$()}}},G={class:"text-center"},z={class:"input-group mt-5"},K={class:"btn btn-primary",type:"button","aria-expanded":"false",disabled:""},J={class:"d-flex justify-content-center mt-4 mb-4"},Q=["disabled"],Z={key:0,class:"spinner-border spinner-border-sm me-2",role:"status","aria-hidden":"true"},tt={key:1},et={key:2};function it(t,e,a,i,s,n){return d(),u("div",null,[o("p",G," Claim "+r(t.$config.public.tokenSymbol)+" rewards for the previous period. Make sure to visit this page once per week to claim your rewards! ",1),o("div",z,[o("button",K,r(t.$config.public.tokenSymbol),1),C(o("input",{"onUpdate:modelValue":e[0]||(e[0]=l=>n.claimAmount=l),type:"text",class:"form-control",disabled:""},null,512),[[B,n.claimAmount]])]),o("div",J,[o("button",{disabled:s.waiting,class:"btn btn-outline-primary",type:"button",onClick:e[1]||(e[1]=(...l)=>n.claim&&n.claim(...l))},[a.loadingStakingData||s.waiting?(d(),u("span",Z)):p("",!0),n.lastPeriodUpdateNeeded?p("",!0):(d(),u("span",tt,"Claim")),n.lastPeriodUpdateNeeded?(d(),u("span",et,"Update Claim Period")):p("",!0)],8,Q)]),e[4]||(e[4]=o("hr",null,null,-1)),e[5]||(e[5]=o("h4",{class:"text-center"},"Stats",-1)),o("ul",null,[o("li",null," Your stake: "+r(("getLessDecimals"in t?t.getLessDecimals:E(N))(n.stakeTokenBalance))+" "+r(t.$config.public.lpTokenSymbol)+" ("+r(t.$config.public.stakeTokenSymbol)+" tokens) ",1),o("li",null,[g(" Previous period rewards (total): "+r(("getLessDecimals"in t?t.getLessDecimals:E(N))(n.claimRewardsTotal))+" "+r(t.$config.public.tokenSymbol)+" ",1),e[2]||(e[2]=o("i",{class:"bi bi-info-circle-fill","data-bs-container":"body","data-bs-toggle":"popover","data-bs-placement":"top","data-bs-content":"Claimable now. Note that this is a total number for all stakers together."},null,-1))]),o("li",null,[g(" Current period rewards (so far): "+r(("getLessDecimals"in t?t.getLessDecimals:E(N))(n.futureRewards))+" "+r(t.$config.public.tokenSymbol)+" ",1),e[3]||(e[3]=o("i",{class:"bi bi-info-circle-fill","data-bs-container":"body","data-bs-toggle":"popover","data-bs-placement":"top","data-bs-content":"Accrued rewards so far for all stakers together. Not claimable yet. Will be claimable in the next period."},null,-1))]),o("li",null,"Period length: "+r(n.periodLengthHumanReadable),1),o("li",null,"Current period start date: "+r(n.lastPeriodDateTime),1)]),e[6]||(e[6]=o("p",null,[o("small",null," Important: Claim your rewards once per week, otherwise they will be forfeited. ")],-1))])}const nt=L(X,[["render",it]]),st={name:"AddLiquidity",data(){return{allowanceWei:BigInt(0),balanceWei:null,debounce:null,depositAmount:0,ethFieldDisabled:!0,nativeCoinAmount:0,nativeCoinAmountWei:null,timeout:800,waitingApproval:!1,waitingDeposit:!1}},components:{WaitingToast:m},mounted(){this.address&&this.fetchAllowance()},computed:{allowanceTooLow(){return this.allowanceWei<this.depositAmountWei},chatBalanceTooLow(){return this.getChatTokenBalanceWei()<this.depositAmountWei},chatTokenBalance(){return D(this.getChatTokenBalanceWei(),this.$config.public.chatTokenDecimals||18)},depositAmountWei(){return!this.depositAmount||Number(this.depositAmount)===0?BigInt(0):v(String(this.depositAmount))},nativeBalance(){if(this.balanceWei){const t=Number(W(this.balanceWei));return t>0?t.toFixed(2):t.toFixed(6)}return 0},nativeBalanceTooLow(){return this.balanceWei?this.nativeCoinAmountWei>this.balanceWei:!1}},methods:{async approveToken(){const t=this.toast({component:m,props:{text:"Please confirm the transaction."}},{type:"info"});this.waitingApproval=!0;let e;try{const a={address:this.$config.public.chatTokenAddress,abi:[{name:"approve",type:"function",stateMutability:"nonpayable",inputs:[{name:"spender",type:"address"},{name:"amount",type:"uint256"}],outputs:[{name:"",type:"bool"}]}],functionName:"approve",args:[this.$config.public.swapRouterAddress,BigInt(this.depositAmountWei)]},i=await k(a);this.toast.dismiss(t),e=this.toast({component:m,props:{text:"Please wait for your transaction to confirm. Click on this notification to see transaction in the block explorer."}},{type:"info",onClick:()=>window.open(this.$config.public.blockExplorerBaseUrl+"/tx/"+i,"_blank").focus()});const s=await w(i);s.status==="success"?(this.allowanceWei=this.depositAmountWei,this.toast.dismiss(e),this.toast("You have successfully approved tokens. Now proceed with getting LP tokens!",{type:"success",onClick:()=>window.open(this.$config.public.blockExplorerBaseUrl+"/tx/"+i,"_blank").focus()}),this.waitingApproval=!1,this.deposit()):(this.toast.dismiss(e),this.waitingApproval=!1,this.toast("Transaction has failed.",{type:"error",onClick:()=>window.open(this.$config.public.blockExplorerBaseUrl+"/tx/"+i,"_blank").focus()}),console.log(s))}catch(a){try{let i=a.message.split("Details:")[1];i=i.split("Version: viem")[0],i=i.replace(/"/g,""),i=i.replace("execution reverted:","Error:"),console.log(i),this.toast(i,{type:"error"})}catch{this.toast("Transaction has failed.",{type:"error"})}this.waitingApproval=!1}finally{this.toast.dismiss(t),this.toast.dismiss(e),this.waitingApproval=!1}},async deposit(){const t=this.toast({component:m,props:{text:"Please confirm the transaction."}},{type:"info"});this.waitingDeposit=!0;const e=Math.floor(Date.now()/1e3)+60*this.swapDeadline,a=v(String(this.nativeCoinAmount)),i=Math.floor(Number(this.slippage)*100),s=a-a*BigInt(i)/BigInt(1e4),n=this.depositAmountWei-this.depositAmountWei*BigInt(i)/BigInt(1e4);let l;try{const c={address:this.$config.public.swapRouterAddress,abi:[{name:"addLiquidityETH",type:"function",stateMutability:"payable",inputs:[{name:"token",type:"address"},{name:"amountTokenDesired",type:"uint256"},{name:"amountTokenMin",type:"uint256"},{name:"amountETHMin",type:"uint256"},{name:"to",type:"address"},{name:"deadline",type:"uint256"}],outputs:[{name:"amountToken",type:"uint256"},{name:"amountETH",type:"uint256"},{name:"liquidity",type:"uint256"}]}],functionName:"addLiquidityETH",args:[this.$config.public.chatTokenAddress,BigInt(this.depositAmountWei),BigInt(n),BigInt(s),this.address,BigInt(e)],value:BigInt(a)},h=await k(c);this.toast.dismiss(t),l=this.toast({component:m,props:{text:`Adding liquidity to the ${this.$config.public.chatTokenSymbol}-${this.$config.public.tokenSymbol} pool...`}},{type:"info",onClick:()=>window.open(this.$config.public.blockExplorerBaseUrl+"/tx/"+h,"_blank").focus()});const y=await w(h);if(y.status==="success"){this.toast.dismiss(l),this.toast(`You have successfully provided liquidity and received ${this.$config.public.lpTokenSymbol}!`,{type:"success",onClick:()=>window.open(this.$config.public.blockExplorerBaseUrl+"/tx/"+h,"_blank").focus()}),this.allowanceWei=this.allowanceWei-this.depositAmountWei;let S=v(this.chatTokenBalance);this.setChatTokenBalanceWei(S-this.depositAmountWei),this.fetchLpTokenBalance(),this.depositAmount=0,this.nativeCoinAmount=0,this.nativeCoinAmountWei=null}else this.toast.dismiss(l),this.toast("Transaction has failed.",{type:"error",onClick:()=>window.open(this.$config.public.blockExplorerBaseUrl+"/tx/"+h,"_blank").focus()}),console.log(y)}catch(c){try{let h=c.message.split("Details:")[1];h=h.split("Version: viem")[0],h=h.replace(/"/g,""),h=h.replace("execution reverted:","Error:"),console.log(h),this.toast(h,{type:"error"})}catch{this.toast("Transaction has failed.",{type:"error"})}}finally{this.toast.dismiss(t),this.toast.dismiss(l),this.waitingDeposit=!1}},async fetchAllowance(){try{const t={address:this.$config.public.chatTokenAddress,abi:[{name:"allowance",type:"function",stateMutability:"view",inputs:[{name:"owner",type:"address"},{name:"spender",type:"address"}],outputs:[{name:"",type:"uint256"}]}],functionName:"allowance",args:[this.address,this.$config.public.swapRouterAddress]},e=await f(t);e!==null&&(this.allowanceWei=e)}catch(t){console.error("Error fetching allowance:",t)}},async fetchLpTokenBalance(){try{const t={address:this.$config.public.lpTokenAddress,abi:[{name:"balanceOf",type:"function",stateMutability:"view",inputs:[{name:"account",type:"address"}],outputs:[{name:"",type:"uint256"}]}],functionName:"balanceOf",args:[this.address]},e=await f(t);e!==null&&this.setLpTokenBalanceWei(e)}catch(t){console.error("Error fetching LP token balance:",t)}},async fetchNativeCoinAmount(){try{const t={address:this.$config.public.swapRouterAddress,abi:[{name:"calculateETHForLiquidity",type:"function",stateMutability:"view",inputs:[{name:"addressToken",type:"address"},{name:"amountToken",type:"uint256"}],outputs:[{name:"",type:"uint256"}]}],functionName:"calculateETHForLiquidity",args:[this.$config.public.chatTokenAddress,v(String(this.depositAmount))]},e=await f(t);e!==null&&(this.nativeCoinAmountWei=e,this.nativeCoinAmount=W(this.nativeCoinAmountWei),Number(this.nativeCoinAmountWei)===0&&(this.ethFieldDisabled=!1))}catch(t){console.error("Error fetching native coin amount:",t)}},setMaxInputTokenAmount(){this.depositAmount=this.chatTokenBalance,this.fetchNativeCoinAmount()},fetchNativeCoinAmountWithTimeout(){this.debounce&&clearTimeout(this.debounce);const t=this;this.debounce=setTimeout(()=>{t.fetchNativeCoinAmount()},t.timeout)},async getUserNativeCoinBalanceWei(){this.address&&(this.balanceWei=await V(this.address))}},setup(){const t=_(),{address:e}=M({config:t}),{getChatTokenBalanceWei:a,setChatTokenBalanceWei:i,setLpTokenBalanceWei:s}=I(),{swapDeadline:n,slippage:l}=q(),c=$();return{address:e,getChatTokenBalanceWei:a,setChatTokenBalanceWei:i,setLpTokenBalanceWei:s,swapDeadline:n,slippage:l,toast:c}},watch:{address(t,e){t&&this.fetchAllowance()}}},ot={class:"text-center"},at={class:"input-group mt-5"},lt={class:"btn btn-primary",type:"button","aria-expanded":"false",disabled:""},rt=["disabled"],ct={class:"text-muted"},ut={class:"input-group mt-5"},dt={class:"btn btn-primary",type:"button","aria-expanded":"false",disabled:""},pt=["disabled"],mt={class:"text-muted"},ht={class:"d-flex justify-content-center mt-4 mb-4"},ft=["disabled"],gt={key:0,class:"spinner-border spinner-border-sm",role:"status","aria-hidden":"true"},bt=["disabled"],kt={key:0,class:"spinner-border spinner-border-sm",role:"status","aria-hidden":"true"},wt={key:2,disabled:"",class:"btn btn-outline-primary",type:"button"},yt={key:0},Tt={key:1},At={class:"text-center"},Wt={key:0,class:"text-center"};function vt(t,e,a,i,s,n){return d(),u(P,null,[o("p",ot," No "+r(t.$config.public.lpTokenSymbol)+"? Add liquidity to the "+r(t.$config.public.chatTokenSymbol)+"-"+r(t.$config.public.tokenSymbol)+" pool below to get some. ",1),o("div",at,[o("button",lt,r(t.$config.public.chatTokenSymbol),1),C(o("input",{"onUpdate:modelValue":e[0]||(e[0]=l=>s.depositAmount=l),type:"text",class:"form-control",placeholder:"0.00",disabled:s.waitingApproval||s.waitingDeposit,onKeyup:e[1]||(e[1]=(...l)=>n.fetchNativeCoinAmountWithTimeout&&n.fetchNativeCoinAmountWithTimeout(...l))},null,40,rt),[[B,s.depositAmount]]),o("button",{onClick:e[2]||(e[2]=(...l)=>n.setMaxInputTokenAmount&&n.setMaxInputTokenAmount(...l)),class:"btn btn-outline-secondary",type:"button",id:"button-addon2"},[...e[7]||(e[7]=[o("small",null,"MAX",-1)])])]),o("small",ct,[o("em",null,[e[8]||(e[8]=g(" Balance: ",-1)),o("span",{class:"cursor-pointer hover-color",onClick:e[3]||(e[3]=(...l)=>n.setMaxInputTokenAmount&&n.setMaxInputTokenAmount(...l))},r(n.chatTokenBalance)+" "+r(t.$config.public.chatTokenSymbol),1)])]),o("div",ut,[o("button",dt,r(t.$config.public.tokenSymbol),1),C(o("input",{"onUpdate:modelValue":e[4]||(e[4]=l=>s.nativeCoinAmount=l),type:"text",class:"form-control",disabled:s.ethFieldDisabled},null,8,pt),[[B,s.nativeCoinAmount]])]),o("small",mt,[o("em",null,[e[9]||(e[9]=g(" Balance: ",-1)),o("span",null,r(n.nativeBalance)+" "+r(t.$config.public.tokenSymbol),1)])]),o("div",ht,[n.allowanceTooLow&&!n.nativeBalanceTooLow?(d(),u("button",{key:0,disabled:s.waitingApproval,class:"btn btn-outline-primary",type:"button",onClick:e[5]||(e[5]=(...l)=>n.approveToken&&n.approveToken(...l))},[s.waitingApproval?(d(),u("span",gt)):p("",!0),g(" Approve "+r(t.$config.public.chatTokenSymbol)+" token ",1)],8,ft)):p("",!0),!n.allowanceTooLow&&!n.nativeBalanceTooLow?(d(),u("button",{key:1,disabled:s.waitingDeposit,class:"btn btn-outline-primary",type:"button",onClick:e[6]||(e[6]=(...l)=>n.deposit&&n.deposit(...l))},[s.waitingDeposit?(d(),u("span",kt)):p("",!0),g(" Get "+r(t.$config.public.lpTokenSymbol),1)],8,bt)):p("",!0),n.nativeBalanceTooLow||n.chatBalanceTooLow?(d(),u("button",wt,[n.nativeBalanceTooLow&&!n.chatBalanceTooLow?(d(),u("span",yt,r(t.$config.public.tokenSymbol),1)):p("",!0),n.chatBalanceTooLow?(d(),u("span",Tt,r(t.$config.public.chatTokenSymbol),1)):p("",!0),e[10]||(e[10]=g(" balance too low ",-1))])):p("",!0)]),o("p",At,[n.allowanceTooLow?(d(),u("small",Wt,[o("em",null," You will need to do 2 transactions: Approve "+r(t.$config.public.chatTokenSymbol)+" token and then Get "+r(t.$config.public.lpTokenSymbol)+". ",1)])):p("",!0)])],64)}const Ct=L(st,[["render",vt]]),Bt={name:"StakingDeposit",props:["loadingStakingData","minDepositWei","maxDepositWei","lpTokenAllowanceWei"],emits:["clearClaimAmount","fetchLockedTimeLeft","updateAllowance"],data(){return{allowanceWei:BigInt(0),depositAmount:0,waitingApproval:!1,waitingDeposit:!1}},components:{AddLiquidity:Ct},mounted(){this.allowanceWei=this.lpTokenAllowanceWei||BigInt(0),this.fetchLpTokenBalance()},computed:{allowanceTooLow(){return this.allowanceWei<this.depositAmountWei},depositAmountWei(){return!this.depositAmount||Number(this.depositAmount)===0?BigInt(0):F(String(this.depositAmount),this.$config.public.lpTokenDecimals)},depositTooLow(){return!this.depositAmount||Number(this.depositAmount)===0?!0:this.depositAmountWei<(this.minDepositWei||BigInt(0))},lpTokenBalance(){return D(this.getLpTokenBalanceWei(),this.$config.public.lpTokenDecimals)},minDeposit(){return this.minDepositWei===null||this.minDepositWei===void 0||this.minDepositWei===""||this.minDepositWei==0?0:D(this.minDepositWei,18)}},methods:{async fetchLpTokenBalance(){if(this.address)try{const t={address:this.$config.public.lpTokenAddress,abi:[{name:"balanceOf",type:"function",stateMutability:"view",inputs:[{name:"account",type:"address"}],outputs:[{name:"",type:"uint256"}]}],functionName:"balanceOf",args:[this.address]},e=await f(t);e!==null&&this.setLpTokenBalanceWei(e)}catch(t){console.error("Error fetching LP token balance:",t)}},async approveToken(){const t=this.toast({component:m,props:{text:"Please confirm the transaction."}},{type:"info"});this.waitingApproval=!0;let e;try{const a={address:this.$config.public.lpTokenAddress,abi:[{name:"approve",type:"function",stateMutability:"nonpayable",inputs:[{name:"spender",type:"address"},{name:"amount",type:"uint256"}],outputs:[{name:"",type:"bool"}]}],functionName:"approve",args:[this.$config.public.stakingContractAddress,BigInt(this.depositAmountWei)]},i=await k(a);this.toast.dismiss(t),e=this.toast({component:m,props:{text:"Please wait for your transaction to confirm. Click on this notification to see transaction in the block explorer."}},{type:"info",onClick:()=>window.open(this.$config.public.blockExplorerBaseUrl+"/tx/"+i,"_blank").focus()});const s=await w(i);s.status==="success"?(this.$emit("updateAllowance",this.depositAmountWei),this.toast.dismiss(e),this.toast("You have successfully approved tokens. Now proceed with staking!",{type:"success",onClick:()=>window.open(this.$config.public.blockExplorerBaseUrl+"/tx/"+i,"_blank").focus()}),this.waitingApproval=!1,this.deposit()):(this.toast.dismiss(e),this.waitingApproval=!1,this.toast("Transaction has failed.",{type:"error",onClick:()=>window.open(this.$config.public.blockExplorerBaseUrl+"/tx/"+i,"_blank").focus()}),console.log(s))}catch(a){try{let i=a.message.split("Details:")[1];i=i.split("Version: viem")[0],i=i.replace(/"/g,""),i=i.replace("execution reverted:","Error:"),console.log(i),this.toast(i,{type:"error"})}catch{this.toast("Transaction has failed.",{type:"error"})}this.waitingApproval=!1}finally{this.toast.dismiss(t),this.toast.dismiss(e),this.waitingApproval=!1}},async deposit(){const t=this.toast({component:m,props:{text:"Please confirm the transaction."}},{type:"info"});this.waitingDeposit=!0;let e;try{const a={address:this.$config.public.stakingContractAddress,abi:[{name:"deposit",type:"function",stateMutability:"nonpayable",inputs:[{name:"_assets",type:"uint256"}],outputs:[{name:"",type:"uint256"}]}],functionName:"deposit",args:[BigInt(this.depositAmountWei)]},i=await k(a);this.toast.dismiss(t),e=this.toast({component:m,props:{text:"Please wait for your transaction to confirm. Click on this notification to see transaction in the block explorer."}},{type:"info",onClick:()=>window.open(this.$config.public.blockExplorerBaseUrl+"/tx/"+i,"_blank").focus()});const s=await w(i);if(s.status==="success"){this.$emit("updateAllowance",BigInt(0));const n=this.getLpTokenBalanceWei();this.setLpTokenBalanceWei(n-this.depositAmountWei);const l=this.getStakeTokenBalanceWei();this.setStakeTokenBalanceWei(l+this.depositAmountWei),this.$emit("clearClaimAmount"),this.$emit("fetchLockedTimeLeft"),this.depositAmount=0,this.toast.dismiss(e),this.toast("You have successfully staked tokens!",{type:"success",onClick:()=>window.open(this.$config.public.blockExplorerBaseUrl+"/tx/"+i,"_blank").focus()}),this.waitingDeposit=!1}else this.toast.dismiss(e),this.waitingDeposit=!1,this.toast("Transaction has failed.",{type:"error",onClick:()=>window.open(this.$config.public.blockExplorerBaseUrl+"/tx/"+i,"_blank").focus()}),console.log(s)}catch(a){try{let i=a.message.split("Details:")[1];i=i.split("Version: viem")[0],i=i.replace(/"/g,""),i=i.replace("execution reverted:","Error:"),console.log(i),this.toast(i,{type:"error"})}catch{this.toast("Transaction has failed.",{type:"error"})}this.waitingDeposit=!1}finally{this.toast.dismiss(t),this.toast.dismiss(e),this.waitingDeposit=!1}},setMaxInputTokenAmount(){this.depositAmount=this.lpTokenBalance}},setup(){const t=_(),{address:e}=M({config:t}),{getLpTokenBalanceWei:a,setLpTokenBalanceWei:i,getStakeTokenBalanceWei:s,setStakeTokenBalanceWei:n}=I(),l=$();return{address:e,toast:l,getLpTokenBalanceWei:a,setLpTokenBalanceWei:i,getStakeTokenBalanceWei:s,setStakeTokenBalanceWei:n}},watch:{lpTokenAllowanceWei(){this.allowanceWei=this.lpTokenAllowanceWei||BigInt(0)}}},Dt={class:"text-center"},Lt={class:"input-group mt-5"},St={class:"btn btn-primary",type:"button","aria-expanded":"false",disabled:""},xt=["disabled"],$t={class:"text-muted"},_t={class:"d-flex justify-content-center mt-4 mb-4"},Mt=["disabled"],It={key:0,class:"spinner-border spinner-border-sm",role:"status","aria-hidden":"true"},Et=["disabled"],Nt={key:0,class:"spinner-border spinner-border-sm",role:"status","aria-hidden":"true"},Rt={class:"text-center"},Pt={key:0,class:"text-center"};function Ut(t,e,a,i,s,n){const l=x("AddLiquidity");return d(),u("div",null,[o("p",Dt," Stake "+r(t.$config.public.lpTokenSymbol)+" to receive periodic staking rewards in "+r(t.$config.public.tokenSymbol)+" tokens (min deposit: "+r(n.minDeposit)+" "+r(t.$config.public.lpTokenSymbol)+"). ",1),o("div",Lt,[o("button",St,r(t.$config.public.lpTokenSymbol),1),C(o("input",{"onUpdate:modelValue":e[0]||(e[0]=c=>s.depositAmount=c),type:"text",class:"form-control",placeholder:"0.00",disabled:s.waitingApproval||s.waitingDeposit},null,8,xt),[[B,s.depositAmount]]),o("button",{onClick:e[1]||(e[1]=(...c)=>n.setMaxInputTokenAmount&&n.setMaxInputTokenAmount(...c)),class:"btn btn-outline-secondary",type:"button",id:"button-addon2"},[...e[5]||(e[5]=[o("small",null,"MAX",-1)])])]),o("small",$t,[o("em",null,[e[6]||(e[6]=g(" Balance: ",-1)),o("span",{class:"cursor-pointer hover-color",onClick:e[2]||(e[2]=(...c)=>n.setMaxInputTokenAmount&&n.setMaxInputTokenAmount(...c))},r(n.lpTokenBalance)+" "+r(t.$config.public.lpTokenSymbol),1)])]),o("div",_t,[n.allowanceTooLow?(d(),u("button",{key:0,disabled:s.waitingApproval||n.depositTooLow,class:"btn btn-outline-primary",type:"button",onClick:e[3]||(e[3]=(...c)=>n.approveToken&&n.approveToken(...c))},[a.loadingStakingData||s.waitingApproval?(d(),u("span",It)):p("",!0),e[7]||(e[7]=g(" Approve token ",-1))],8,Mt)):p("",!0),n.allowanceTooLow?p("",!0):(d(),u("button",{key:1,disabled:s.waitingDeposit||n.depositTooLow,class:"btn btn-outline-primary",type:"button",onClick:e[4]||(e[4]=(...c)=>n.deposit&&n.deposit(...c))},[a.loadingStakingData||s.waitingDeposit?(d(),u("span",Nt)):p("",!0),e[8]||(e[8]=g(" Stake ",-1))],8,Et))]),o("p",Rt,[n.allowanceTooLow?(d(),u("small",Pt,[...e[9]||(e[9]=[o("em",null," You will need to do 2 transactions: Approve token and then Stake. ",-1)])])):p("",!0)]),e[10]||(e[10]=o("hr",{class:"mb-5"},null,-1)),b(l)])}const qt=L(Bt,[["render",Ut]]),Ht={name:"RemoveLiquidity",data(){return{allowanceWei:BigInt(0),depositAmount:0,waitingApproval:!1,waitingDeposit:!1}},components:{WaitingToast:m},mounted(){this.address&&this.fetchAllowance()},computed:{allowanceTooLow(){return this.allowanceWei<this.depositAmountWei},lpTokenBalance(){return D(this.lpTokenBalanceWei||BigInt(0),this.$config.public.lpTokenDecimals||18)},depositAmountWei(){return!this.depositAmount||Number(this.depositAmount)===0?BigInt(0):v(String(this.depositAmount))},lpTokenBalanceWei(){return this.getLpTokenBalanceWei()}},methods:{async approveToken(){const t=this.toast({component:m,props:{text:"Please confirm the transaction."}},{type:"info"});this.waitingApproval=!0;let e;try{const a={address:this.$config.public.lpTokenAddress,abi:[{name:"approve",type:"function",stateMutability:"nonpayable",inputs:[{name:"spender",type:"address"},{name:"amount",type:"uint256"}],outputs:[{name:"",type:"bool"}]}],functionName:"approve",args:[this.$config.public.swapRouterAddress,BigInt(this.depositAmountWei)]},i=await k(a);this.toast.dismiss(t),e=this.toast({component:m,props:{text:"Please wait for your transaction to confirm. Click on this notification to see transaction in the block explorer."}},{type:"info",onClick:()=>window.open(this.$config.public.blockExplorerBaseUrl+"/tx/"+i,"_blank").focus()});const s=await w(i);s.status==="success"?(this.allowanceWei=this.depositAmountWei,this.toast.dismiss(e),this.toast("You have successfully approved tokens. Now proceed with removing liquidity!",{type:"success",onClick:()=>window.open(this.$config.public.blockExplorerBaseUrl+"/tx/"+i,"_blank").focus()}),this.waitingApproval=!1,this.removeLiquidity()):(this.toast.dismiss(e),this.waitingApproval=!1,this.toast("Transaction has failed.",{type:"error",onClick:()=>window.open(this.$config.public.blockExplorerBaseUrl+"/tx/"+i,"_blank").focus()}),console.log(s))}catch(a){console.error(a),this.waitingApproval=!1;try{let i=a.message.split("Details:")[1];i=i.split("Version: viem")[0],i=i.replace(/"/g,""),i=i.replace("execution reverted:","Error:"),console.log(i),this.toast(i,{type:"error"})}catch{this.toast("Transaction has failed.",{type:"error"})}}finally{this.toast.dismiss(t),this.toast.dismiss(e),this.waitingApproval=!1}},async removeLiquidity(){const t=this.toast({component:m,props:{text:"Please confirm the transaction."}},{type:"info"});this.waitingDeposit=!0;let e;try{const a={address:this.$config.public.swapRouterAddress,abi:[{name:"calculateETHAndTokensToReceive",type:"function",stateMutability:"view",inputs:[{name:"_lpToken",type:"address"},{name:"_lpAmount",type:"uint256"}],outputs:[{name:"amountToken",type:"uint256"},{name:"amountETH",type:"uint256"}]}],functionName:"calculateETHAndTokensToReceive",args:[this.$config.public.chatTokenAddress,BigInt(this.depositAmountWei)]},i=await f(a);if(!i)throw new Error("Failed to calculate amounts");const[s,n]=i,l=Math.floor(Date.now()/1e3)+60*this.swapDeadline,c=Math.floor(Number(this.slippage)*100),h=n-n*BigInt(c)/BigInt(1e4),y=s-s*BigInt(c)/BigInt(1e4),S={address:this.$config.public.swapRouterAddress,abi:[{name:"removeLiquidityETH",type:"function",stateMutability:"nonpayable",inputs:[{name:"token",type:"address"},{name:"liquidity",type:"uint256"},{name:"amountTokenMin",type:"uint256"},{name:"amountETHMin",type:"uint256"},{name:"to",type:"address"},{name:"deadline",type:"uint256"}],outputs:[{name:"amountToken",type:"uint256"},{name:"amountETH",type:"uint256"}]}],functionName:"removeLiquidityETH",args:[this.$config.public.chatTokenAddress,BigInt(this.depositAmountWei),BigInt(y),BigInt(h),this.address,BigInt(l)]},T=await k(S);this.toast.dismiss(t),e=this.toast({component:m,props:{text:`Removing liquidity from the ${this.$config.public.lpTokenSymbol}-${this.$config.public.tokenSymbol} pool...`}},{type:"info",onClick:()=>window.open(this.$config.public.blockExplorerBaseUrl+"/tx/"+T,"_blank").focus()});const A=await w(T);if(A.status==="success"){this.toast.dismiss(e),this.toast(`You have successfully removed liquidity and received ${this.$config.public.lpTokenSymbol} & ${this.$config.public.tokenSymbol}!`,{type:"success",onClick:()=>window.open(this.$config.public.blockExplorerBaseUrl+"/tx/"+T,"_blank").focus()}),this.allowanceWei=this.allowanceWei-this.depositAmountWei;const H=this.getLpTokenBalanceWei()-this.depositAmountWei;this.setLpTokenBalanceWei(H),this.depositAmount=0}else this.toast.dismiss(e),this.toast("Transaction has failed.",{type:"error",onClick:()=>window.open(this.$config.public.blockExplorerBaseUrl+"/tx/"+T,"_blank").focus()}),console.log(A)}catch(a){console.error(a);try{let i=a.message.split("Details:")[1];i=i.split("Version: viem")[0],i=i.replace(/"/g,""),i=i.replace("execution reverted:","Error:"),console.log(i),this.toast(i,{type:"error"})}catch{this.toast("Transaction has failed.",{type:"error"})}}finally{this.toast.dismiss(t),this.toast.dismiss(e),this.waitingDeposit=!1}},async fetchAllowance(){try{const t={address:this.$config.public.lpTokenAddress,abi:[{name:"allowance",type:"function",stateMutability:"view",inputs:[{name:"owner",type:"address"},{name:"spender",type:"address"}],outputs:[{name:"",type:"uint256"}]}],functionName:"allowance",args:[this.address,this.$config.public.swapRouterAddress]},e=await f(t);e&&(this.allowanceWei=e)}catch(t){console.error("Failed to fetch allowance:",t)}},setMaxInputTokenAmount(){this.depositAmount=this.lpTokenBalance}},setup(){const t=_(),{address:e}=M({config:t}),{getLpTokenBalanceWei:a,setLpTokenBalanceWei:i}=I(),{slippage:s,swapDeadline:n}=q(),l=$();return{address:e,slippage:s,swapDeadline:n,toast:l,getLpTokenBalanceWei:a,setLpTokenBalanceWei:i}},watch:{address(t,e){t&&this.fetchAllowance()}}},Vt={class:"text-center"},Ft={class:"input-group mt-5"},jt={class:"btn btn-primary",type:"button","aria-expanded":"false",disabled:""},Yt=["disabled"],Ot={class:"text-muted"},Xt={class:"d-flex justify-content-center mt-4 mb-4"},Gt=["disabled"],zt={key:0,class:"spinner-border spinner-border-sm",role:"status","aria-hidden":"true"},Kt=["disabled"],Jt={key:0,class:"spinner-border spinner-border-sm",role:"status","aria-hidden":"true"},Qt={class:"text-center"},Zt={key:0,class:"text-center"};function te(t,e,a,i,s,n){return d(),u(P,null,[o("p",Vt," Remove liquidity and get back "+r(t.$config.public.chatTokenSymbol)+" & "+r(t.$config.public.tokenSymbol)+" tokens. ",1),o("div",Ft,[o("button",jt,r(t.$config.public.lpTokenSymbol),1),C(o("input",{"onUpdate:modelValue":e[0]||(e[0]=l=>s.depositAmount=l),type:"text",class:"form-control",placeholder:"0.00",disabled:s.waitingApproval||s.waitingDeposit},null,8,Yt),[[B,s.depositAmount]]),o("button",{onClick:e[1]||(e[1]=(...l)=>n.setMaxInputTokenAmount&&n.setMaxInputTokenAmount(...l)),class:"btn btn-outline-secondary",type:"button",id:"button-addon2"},[...e[5]||(e[5]=[o("small",null,"MAX",-1)])])]),o("small",Ot,[o("em",null,[e[6]||(e[6]=g(" Balance: ",-1)),o("span",{class:"cursor-pointer hover-color",onClick:e[2]||(e[2]=(...l)=>n.setMaxInputTokenAmount&&n.setMaxInputTokenAmount(...l))},r(n.lpTokenBalance)+" "+r(t.$config.public.lpTokenSymbol),1)])]),o("div",Xt,[n.allowanceTooLow?(d(),u("button",{key:0,disabled:s.waitingApproval,class:"btn btn-outline-primary",type:"button",onClick:e[3]||(e[3]=(...l)=>n.approveToken&&n.approveToken(...l))},[s.waitingApproval?(d(),u("span",zt)):p("",!0),g(" Approve "+r(t.$config.public.lpTokenSymbol),1)],8,Gt)):p("",!0),n.allowanceTooLow?p("",!0):(d(),u("button",{key:1,disabled:s.waitingDeposit,class:"btn btn-outline-primary",type:"button",onClick:e[4]||(e[4]=(...l)=>n.removeLiquidity&&n.removeLiquidity(...l))},[s.waitingDeposit?(d(),u("span",Jt)):p("",!0),e[7]||(e[7]=g(" Remove liquidity ",-1))],8,Kt))]),o("p",Qt,[n.allowanceTooLow?(d(),u("small",Zt,[o("em",null," You will need to do 2 transactions: Approve "+r(t.$config.public.lpTokenSymbol)+" and then Remove liquidity. ",1)])):p("",!0)])],64)}const ee=L(Ht,[["render",te]]),ie={name:"StakingWithdrawal",props:["loadingStakingData","lockedTimeLeft","minDepositWei"],emits:["clearClaimAmount"],data(){return{withdrawalAmount:0,waitingWithdrawal:!1}},components:{RemoveLiquidity:ee},mounted(){},computed:{isWithdrawalAmountNullOrEmpty(){return this.withdrawalAmount===null||this.withdrawalAmount===""||this.withdrawalAmount==0||Number(this.withdrawalAmount)===0},lockedSecondsHumanReadable(){const t=Number(this.lockedTimeLeft),e=Math.floor(t/60),a=Math.floor(e/60),i=Math.floor(a/24);return i>0?`${i+1} days`:a>0?`${a+1} hours`:e>0?`${e+1} minutes`:`${t+1} seconds`},minDeposit(){return D(this.minDepositWei||BigInt(0),this.$config.public.lpTokenDecimals||18)},stakeTokenBalance(){return D(this.getStakeTokenBalanceWei(),this.$config.public.stakeTokenDecimals||18)},withdrawalAmountWei(){return!this.withdrawalAmount||Number(this.withdrawalAmount)===0?BigInt(0):v(String(this.withdrawalAmount))},withdrawalIncorrect(){return Number(this.lockedTimeLeft)>0?{error:!0,message:"Your staked tokens are still locked for "+this.lockedSecondsHumanReadable+"."}:this.withdrawalAmountWei>this.getStakeTokenBalanceWei?{error:!0,message:"The amount exceeds your staked token balance."}:this.withdrawalAmountWei<this.getStakeTokenBalanceWei&&this.getStakeTokenBalanceWei-this.withdrawalAmountWei<(this.minDepositWei||BigInt(0))?{error:!0,message:"You cannot unstake this amount because the staked balance left will be less than the minimum required staking amount ("+String(Number(this.minDeposit))+" tokens)."}:{error:!1,message:""}}},methods:{async withdrawal(){const t=this.toast({component:m,props:{text:"Please confirm the transaction."}},{type:"info"});this.waitingWithdrawal=!0;let e;try{const a={address:this.$config.public.stakingContractAddress,abi:[{name:"withdraw",type:"function",stateMutability:"nonpayable",inputs:[{name:"_assets",type:"uint256"}],outputs:[{name:"",type:"uint256"}]}],functionName:"withdraw",args:[BigInt(this.withdrawalAmountWei)]},i=await k(a);this.toast.dismiss(t),e=this.toast({component:m,props:{text:"Please wait for your transaction to confirm. Click on this notification to see transaction in the block explorer."}},{type:"info",onClick:()=>window.open(this.$config.public.blockExplorerBaseUrl+"/tx/"+i,"_blank").focus()});const s=await w(i);s.status==="success"?(this.addToStakeTokenBalanceWei(-this.withdrawalAmountWei),this.$emit("clearClaimAmount"),this.toast.dismiss(e),this.toast("You have successfully unstaked tokens!",{type:"success",onClick:()=>window.open(this.$config.public.blockExplorerBaseUrl+"/tx/"+i,"_blank").focus()}),this.waitingWithdrawal=!1):(this.toast.dismiss(e),this.waitingWithdrawal=!1,this.toast("Transaction has failed.",{type:"error",onClick:()=>window.open(this.$config.public.blockExplorerBaseUrl+"/tx/"+i,"_blank").focus()}),console.log(s))}catch(a){console.error(a);try{let i=a.message.split("Details:")[1];i=i.split("Version: viem")[0],i=i.replace(/"/g,""),i=i.replace("execution reverted:","Error:"),i=i.replace("PeriodicEthRewards: ",""),console.log(i),this.toast(i,{type:"error"})}catch{this.toast("Transaction has failed.",{type:"error"})}this.waitingWithdrawal=!1}finally{this.toast.dismiss(t),this.toast.dismiss(e),this.waitingWithdrawal=!1}},setMaxInputTokenAmount(){this.withdrawalAmount=this.stakeTokenBalance}},setup(){const t=_(),{address:e}=M({config:t}),{getStakeTokenBalanceWei:a,addToStakeTokenBalanceWei:i}=I(),s=$();return{address:e,toast:s,getStakeTokenBalanceWei:a,addToStakeTokenBalanceWei:i}}},ne={class:"text-center"},se={class:"input-group mt-5"},oe={class:"btn btn-primary",type:"button","aria-expanded":"false",disabled:""},ae=["disabled"],le={class:"text-muted"},re={class:"d-flex justify-content-center mt-4 mb-4"},ce=["disabled"],ue={key:0,class:"spinner-border spinner-border-sm",role:"status","aria-hidden":"true"},de={key:0,class:"alert alert-warning text-center text-dark",role:"alert"};function pe(t,e,a,i,s,n){const l=x("RemoveLiquidity");return d(),u("div",null,[o("p",ne," Unstake "+r(t.$config.public.stakeTokenSymbol)+" to receive back "+r(t.$config.public.lpTokenSymbol)+" (it will also auto-claim any remaining rewards). ",1),o("div",se,[o("button",oe,r(t.$config.public.stakeTokenSymbol),1),C(o("input",{"onUpdate:modelValue":e[0]||(e[0]=c=>s.withdrawalAmount=c),type:"text",class:"form-control",placeholder:"0.00",disabled:s.waitingWithdrawal},null,8,ae),[[B,s.withdrawalAmount]]),o("button",{onClick:e[1]||(e[1]=(...c)=>n.setMaxInputTokenAmount&&n.setMaxInputTokenAmount(...c)),class:"btn btn-outline-secondary",type:"button",id:"button-addon2"},[...e[4]||(e[4]=[o("small",null,"MAX",-1)])])]),o("small",le,[o("em",null,[e[5]||(e[5]=g(" Balance: ",-1)),o("span",{class:"cursor-pointer hover-color",onClick:e[2]||(e[2]=(...c)=>n.setMaxInputTokenAmount&&n.setMaxInputTokenAmount(...c))},r(n.stakeTokenBalance)+" "+r(t.$config.public.stakeTokenSymbol),1)])]),o("div",re,[o("button",{disabled:s.waitingWithdrawal||n.withdrawalIncorrect.error||n.isWithdrawalAmountNullOrEmpty,class:"btn btn-outline-primary",type:"button",onClick:e[3]||(e[3]=(...c)=>n.withdrawal&&n.withdrawal(...c))},[a.loadingStakingData||s.waitingWithdrawal?(d(),u("span",ue)):p("",!0),e[6]||(e[6]=g(" Unstake ",-1))],8,ce)]),n.withdrawalIncorrect.error?(d(),u("div",de,r(n.withdrawalIncorrect.message),1)):p("",!0),e[7]||(e[7]=o("hr",null,null,-1)),b(l)])}const me=L(ie,[["render",pe]]),he={name:"Stake",data(){return{claimAmountWei:0,claimRewardsTotalWei:0,currentTab:"deposit",futureRewardsWei:0,lastClaimPeriod:0,loadingStakingData:!1,lockedTimeLeft:0,minDepositWei:0,maxDepositWei:0,periodLength:0,lpTokenAllowanceWei:0}},components:{StakingClaim:nt,StakingDeposit:qt,StakingWithdrawal:me},mounted(){this.currentTab=localStorage.getItem("stakeCurrentTab"),this.currentTab||(this.currentTab="deposit"),this.address&&this.fetchStakingData()},methods:{changeCurrentTab(t){this.currentTab=t,localStorage.setItem("stakeCurrentTab",t)},clearClaimAmount(){this.claimAmountWei=0},async fetchClaimRewardsTotal(){try{const t=await f({address:this.$config.public.stakingContractAddress,abi:[{inputs:[],name:"claimRewardsTotal",outputs:[{type:"uint256",name:""}],stateMutability:"view",type:"function"}],functionName:"claimRewardsTotal"});this.claimRewardsTotalWei=t||0}catch(t){console.error("Error fetching claim rewards total:",t),this.claimRewardsTotalWei=0}},async fetchFutureRewards(){try{const t=await f({address:this.$config.public.stakingContractAddress,abi:[{inputs:[],name:"futureRewards",outputs:[{type:"uint256",name:""}],stateMutability:"view",type:"function"}],functionName:"futureRewards"});this.futureRewardsWei=t||0}catch(t){console.error("Error fetching future rewards:",t),this.futureRewardsWei=0}},async fetchLockedTimeLeft(){try{const t=await f({address:this.$config.public.stakingContractAddress,abi:[{inputs:[{type:"address",name:"_user"}],name:"getLockedTimeLeft",outputs:[{type:"uint256",name:""}],stateMutability:"view",type:"function"}],functionName:"getLockedTimeLeft",args:[this.address]});this.lockedTimeLeft=t||0}catch(t){console.error("Error fetching locked time left:",t),this.lockedTimeLeft=0}},async fetchPreviewClaim(){try{const t=await f({address:this.$config.public.stakingContractAddress,abi:[{inputs:[{type:"address",name:"_claimer"}],name:"previewClaim",outputs:[{type:"uint256",name:""}],stateMutability:"view",type:"function"}],functionName:"previewClaim",args:[this.address]});this.claimAmountWei=t||0}catch(t){console.error("Error fetching preview claim:",t),this.claimAmountWei=0}},async fetchLpTokenBalance(){try{const t=await f({address:this.$config.public.lpTokenAddress,abi:[{inputs:[{type:"address",name:"_owner"}],name:"balanceOf",outputs:[{type:"uint256",name:""}],stateMutability:"view",type:"function"}],functionName:"balanceOf",args:[this.address]});this.setLpTokenBalanceWei(t||BigInt(0))}catch(t){console.error("Error fetching LP token balance:",t),this.setLpTokenBalanceWei(BigInt(0))}},async fetchLpTokenAllowance(){try{const t=await f({address:this.$config.public.lpTokenAddress,abi:[{inputs:[{type:"address",name:"_owner"},{type:"address",name:"_spender"}],name:"allowance",outputs:[{type:"uint256",name:""}],stateMutability:"view",type:"function"}],functionName:"allowance",args:[this.address,this.$config.public.stakingContractAddress]});this.lpTokenAllowanceWei=t||0}catch(t){console.error("Error fetching LP token allowance:",t),this.lpTokenAllowanceWei=0}},async fetchStakeTokenBalance(){try{const t=await f({address:this.$config.public.stakingContractAddress,abi:[{inputs:[{type:"address",name:"_owner"}],name:"balanceOf",outputs:[{type:"uint256",name:""}],stateMutability:"view",type:"function"}],functionName:"balanceOf",args:[this.address]});this.setStakeTokenBalanceWei(t||BigInt(0))}catch(t){console.error("Error fetching stake token balance:",t),this.setStakeTokenBalanceWei(BigInt(0))}},async fetchMinDeposit(){try{const t=await f({address:this.$config.public.stakingContractAddress,abi:[{inputs:[],name:"minDeposit",outputs:[{type:"uint256",name:""}],stateMutability:"view",type:"function"}],functionName:"minDeposit"});this.minDepositWei=t||0}catch(t){console.error("Error fetching min deposit:",t),this.minDepositWei=0}},async fetchLastClaimPeriod(){try{const t=await f({address:this.$config.public.stakingContractAddress,abi:[{inputs:[],name:"lastClaimPeriod",outputs:[{type:"uint256",name:""}],stateMutability:"view",type:"function"}],functionName:"lastClaimPeriod"});this.lastClaimPeriod=t||0}catch(t){console.error("Error fetching last claim period:",t),this.lastClaimPeriod=0}},async fetchPeriodLength(){try{const t=await f({address:this.$config.public.stakingContractAddress,abi:[{inputs:[],name:"periodLength",outputs:[{type:"uint256",name:""}],stateMutability:"view",type:"function"}],functionName:"periodLength"});this.periodLength=t||0}catch(t){console.error("Error fetching period length:",t),this.periodLength=0}},async fetchMaxDeposit(){try{const t=await f({address:this.$config.public.stakingContractAddress,abi:[{inputs:[],name:"maxDeposit",outputs:[{type:"uint256",name:""}],stateMutability:"view",type:"function"}],functionName:"maxDeposit"});this.maxDepositWei=t||0}catch(t){console.error("Error fetching max deposit:",t),this.maxDepositWei=0}},async fetchStakingData(){this.loadingStakingData=!0;try{await this.fetchPreviewClaim(),await this.fetchLpTokenBalance(),await this.fetchLpTokenAllowance(),await this.fetchStakeTokenBalance(),await this.fetchLockedTimeLeft(),await this.fetchMinDeposit(),this.loadingStakingData=!1,await this.fetchLastClaimPeriod(),await this.fetchPeriodLength(),await this.fetchMaxDeposit(),await this.fetchClaimRewardsTotal(),await this.fetchFutureRewards()}catch(t){console.error("Error fetching staking data:",t),this.loadingStakingData=!1}},updateAllowance(t){this.lpTokenAllowanceWei=Number(t)},updateLastClaimPeriod(){this.lastClaimPeriod=Math.floor(Date.now()/1e3),this.fetchPreviewClaim(),this.fetchClaimRewardsTotal(),this.fetchFutureRewards()},updateStakeTokenBalance(t){const e=this.getStakeTokenBalanceWei();this.setStakeTokenBalanceWei(e+t)}},watch:{address(){this.address&&this.fetchStakingData()}},setup(){const t=_(),{address:e}=M({config:t}),{getLpTokenBalanceWei:a,setLpTokenBalanceWei:i,getStakeTokenBalanceWei:s,setStakeTokenBalanceWei:n}=I();return{address:e,getLpTokenBalanceWei:a,setLpTokenBalanceWei:i,getStakeTokenBalanceWei:s,setStakeTokenBalanceWei:n}}},fe={class:"card border scroll-500"},ge={class:"card-body"},be={class:"fs-3"},ke={class:"nav nav-tabs nav-fill"},we={class:"nav-item"},ye={class:"nav-item"},Te={class:"nav-item"},Ae={class:"tab-content mt-3"},We={key:0},ve={class:"d-flex justify-content-center mt-5"},Ce={class:"col-12 col-lg-8"},Be={key:1},De={class:"d-flex justify-content-center mt-5"},Le={class:"col-12 col-lg-8"},Se={key:2},xe={class:"d-flex justify-content-center mt-5"},$e={class:"col-12 col-lg-8"};function _e(t,e,a,i,s,n){const l=j,c=Y,h=O,y=x("StakingDeposit"),S=x("StakingClaim"),T=x("StakingWithdrawal");return d(),u(P,null,[b(h,null,{default:U(()=>[b(l,null,{default:U(()=>[g("Stake and Earn | "+r(t.$config.public.projectMetadataTitle),1)]),_:1}),b(c,{property:"og:title",content:"Stake and Earn"}),b(c,{name:"description",content:"Stake and earn "+t.$config.public.tokenSymbol+" on "+t.$config.public.projectName+"!"},null,8,["content"]),b(c,{property:"og:image",content:t.$config.public.projectUrl+t.$config.public.previewImageStake},null,8,["content"]),b(c,{property:"og:description",content:"Stake and earn "+t.$config.public.tokenSymbol+" on "+t.$config.public.projectName+"!"},null,8,["content"]),b(c,{name:"twitter:image",content:t.$config.public.projectUrl+t.$config.public.previewImageStake},null,8,["content"]),b(c,{name:"twitter:description",content:"Stake and earn "+t.$config.public.tokenSymbol+" on "+t.$config.public.projectName+"!"},null,8,["content"])]),_:1}),o("div",fe,[o("div",ge,[o("p",be,[o("i",{class:"bi bi-arrow-left-circle cursor-pointer",onClick:e[0]||(e[0]=A=>t.$router.back())})]),o("ul",ke,[o("li",we,[o("button",{class:R(["nav-link",s.currentTab==="deposit"?"active":""]),onClick:e[1]||(e[1]=A=>n.changeCurrentTab("deposit"))}," Stake ",2)]),o("li",ye,[o("button",{class:R(["nav-link",s.currentTab==="claim"?"active":""]),onClick:e[2]||(e[2]=A=>n.changeCurrentTab("claim"))}," Claim ",2)]),o("li",Te,[o("button",{class:R(["nav-link",s.currentTab==="withdraw"?"active":""]),onClick:e[3]||(e[3]=A=>n.changeCurrentTab("withdraw"))}," Unstake ",2)])]),o("div",Ae,[s.currentTab==="deposit"?(d(),u("div",We,[o("div",ve,[o("div",Ce,[b(y,{loadingStakingData:s.loadingStakingData,minDepositWei:s.minDepositWei,maxDepositWei:s.maxDepositWei,lpTokenAllowanceWei:s.lpTokenAllowanceWei,onClearClaimAmount:n.clearClaimAmount,onFetchLockedTimeLeft:n.fetchLockedTimeLeft,onUpdateAllowance:n.updateAllowance},null,8,["loadingStakingData","minDepositWei","maxDepositWei","lpTokenAllowanceWei","onClearClaimAmount","onFetchLockedTimeLeft","onUpdateAllowance"])])])])):p("",!0),s.currentTab==="claim"?(d(),u("div",Be,[o("div",De,[o("div",Le,[b(S,{loadingStakingData:s.loadingStakingData,claimAmountWei:s.claimAmountWei,claimRewardsTotalWei:s.claimRewardsTotalWei,futureRewardsWei:s.futureRewardsWei,lastClaimPeriod:s.lastClaimPeriod,minDepositWei:s.minDepositWei,periodLength:s.periodLength,onClearClaimAmount:n.clearClaimAmount,onUpdateLastClaimPeriod:n.updateLastClaimPeriod},null,8,["loadingStakingData","claimAmountWei","claimRewardsTotalWei","futureRewardsWei","lastClaimPeriod","minDepositWei","periodLength","onClearClaimAmount","onUpdateLastClaimPeriod"])])])])):p("",!0),s.currentTab==="withdraw"?(d(),u("div",Se,[o("div",xe,[o("div",$e,[b(T,{loadingStakingData:s.loadingStakingData,lockedTimeLeft:s.lockedTimeLeft,minDepositWei:s.minDepositWei,onClearClaimAmount:n.clearClaimAmount},null,8,["loadingStakingData","lockedTimeLeft","minDepositWei","onClearClaimAmount"])])])])):p("",!0)])])])],64)}const Ee=L(he,[["render",_e]]);export{Ee as default};
