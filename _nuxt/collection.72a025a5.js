import{H as G,T as q,M as Q}from"./components.20afcf08.js";import{a as w,I as _,G as b,K as v,r as f,o as r,b as l,f as s,e as p,l as c,L as A,M as x,c as I,i as m,t as u,F as N,P as $,ah as S,C as J,w as T,a1 as K,h as X}from"./entry.adf7fb2d.js";import{u as k,v as F}from"./ethers.61d4e059.js";import{C as Z}from"./ChatFeed.377365fa.js";import{C as ee}from"./ConnectWalletButton.7e978d10.js";import{I as U}from"./Image.06cb3f16.js";import{S as te}from"./SwitchChainButton.b1027e35.js";import{W as y}from"./WaitingToast.c5f9c52e.js";import{a as E}from"./FileUploadModal.6ba58e6c.js";import{g as se}from"./domainUtils.cff63b67.js";import{s as ie,b as oe,a as D,c as B}from"./storageUtils.731ece6e.js";import{g as P}from"./textUtils.e4ee0d5e.js";import"./composables.38adb54c.js";import"./ChatPost.8a298b78.js";import"./user.21178cbc.js";import"./MintedPostImage.55a5d125.js";import"./site.a1e43a0e.js";const ne={name:"AddImageToCollectionModal",props:["cAddress","mdAddress"],components:{FileUploadInput:E,Image:U},data(){return{componentId:null,imageUrl:null,waiting:!1}},mounted(){this.componentId=this.$.uid},methods:{async addNewImage(){this.waiting=!0;const o=new _(["function addImageToCollection(address nftAddress_, string memory imageUrl_) external"]),t=new b(this.mdAddress,o,this.signer);try{const a=await t.addImageToCollection(this.cAddress,this.imageUrl),i=this.toast({component:y,props:{text:"Please wait for your transaction to confirm. Click on this notification to see transaction in the block explorer."}},{type:"info",onClick:()=>window.open(this.$config.blockExplorerBaseUrl+"/tx/"+a.hash,"_blank").focus()}),e=await a.wait();e.status===1?(this.toast.dismiss(i),this.toast("You have successfully added new image URL to the NFT collection.",{type:"success",onClick:()=>window.open(this.$config.blockExplorerBaseUrl+"/tx/"+a.hash,"_blank").focus()}),this.imageUrl=null,document.getElementById("closeModal-"+this.componentId).click(),this.waiting=!1):(this.toast.dismiss(i),this.waiting=!1,this.toast("Transaction has failed.",{type:"error",onClick:()=>window.open(this.$config.blockExplorerBaseUrl+"/tx/"+a.hash,"_blank").focus()}),console.log(e))}catch(a){console.error(a);try{let i=a.message.split("reason=")[1];i=i.split(", method=")[0],i=i.replace(/"/g,""),i=i.replace("execution reverted:","Error:"),console.log(i),this.toast(i,{type:"error"})}catch{this.toast("Transaction has failed.",{type:"error"})}this.waiting=!1}},insertImageLink(o){this.imageUrl=o}},setup(){const{signer:o}=k(),t=v();return{signer:o,toast:t}}},ae=["aria-labelledby"],re={class:"modal-dialog"},le={class:"modal-content"},ce={class:"modal-header"},de=["id"],he=["id"],me={class:"modal-body"},ue={class:"mt-2"},pe={key:0},ge=s("p",null,"Upload additional image (and then click Submit below):",-1),fe=s("p",{class:"mt-3"},"Or paste image link here:",-1),_e={key:1},be={key:2,class:"mt-3"},ye=s("br",null,null,-1),we=s("small",null,"If image didn't appear above, then something is wrong with the link you added (wait until the loading indicator completes). If you have an IPFS link, it also helps to cut/paste the same link a couple of times.",-1),ve={class:"modal-footer"},ke=["disabled"],Ce={key:0,class:"spinner-border spinner-border-sm mx-1",role:"status","aria-hidden":"true"};function Ie(o,t,a,i,e,n){const d=f("FileUploadInput"),h=f("Image");return r(),l("div",{class:"modal fade",id:"addImageToCollectionModal",tabindex:"-1","aria-labelledby":"modalLabel-"+e.componentId,"aria-hidden":"true"},[s("div",re,[s("div",le,[s("div",ce,[s("h1",{class:"modal-title fs-5",id:"modalLabel-"+e.componentId},"Add Image To Collection",8,de),s("button",{id:"closeModal-"+e.componentId,type:"button",class:"btn-close","data-bs-dismiss":"modal","aria-label":"Close"},null,8,he)]),s("div",me,[s("div",ue,[!e.imageUrl&&o.$config.fileUploadEnabled?(r(),l("div",pe,[ge,p(d,{btnCls:"btn btn-primary",storageType:"ipfs",maxFileSize:o.$config.fileUploadSizeLimit,onProcessUploadedFileUrl:n.insertImageLink},null,8,["maxFileSize","onProcessUploadedFileUrl"]),fe])):c("",!0),o.$config.fileUploadEnabled?c("",!0):(r(),l("p",_e,"Paste image link here:")),A(s("input",{"onUpdate:modelValue":t[0]||(t[0]=g=>e.imageUrl=g),type:"text",class:"form-control",id:"addImageToCollectionInput"},null,512),[[x,e.imageUrl]]),e.imageUrl?(r(),l("div",be,[(r(),I(h,{url:e.imageUrl,key:e.imageUrl,cls:"img-thumbnail img-fluid",style:{"max-width":"100px"}},null,8,["url"])),ye,we])):c("",!0)])]),s("div",ve,[s("button",{onClick:t[1]||(t[1]=(...g)=>n.addNewImage&&n.addNewImage(...g)),type:"button",class:"btn btn-primary",disabled:!e.imageUrl||e.waiting},[e.waiting?(r(),l("span",Ce)):c("",!0),m(" Submit to blockchain ")],8,ke)])])])],8,ae)}const Ae=w(ne,[["render",Ie]]),xe={name:"ChangeCollectionPreviewModal",props:["cAddress","mdAddress"],emits:["saveCollection"],components:{FileUploadInput:E,Image:U},data(){return{componentId:null,imageUrl:null,waiting:!1}},mounted(){this.componentId=this.$.uid},methods:{async updateImage(){this.waiting=!0;const o=new _(["function setCollectionPreview(address nftAddress_, string memory collectionPreview_) external"]),t=new b(this.mdAddress,o,this.signer);try{const a=await t.setCollectionPreview(this.cAddress,this.imageUrl),i=this.toast({component:y,props:{text:"Please wait for your transaction to confirm. Click on this notification to see transaction in the block explorer."}},{type:"info",onClick:()=>window.open(this.$config.blockExplorerBaseUrl+"/tx/"+a.hash,"_blank").focus()}),e=await a.wait();e.status===1?(this.toast.dismiss(i),this.toast("You have updated the NFT collection preview image.",{type:"success",onClick:()=>window.open(this.$config.blockExplorerBaseUrl+"/tx/"+a.hash,"_blank").focus()}),this.$emit("saveCollection",{image:this.imageUrl}),this.imageUrl=null,document.getElementById("closeModal-"+this.componentId).click(),this.waiting=!1):(this.toast.dismiss(i),this.waiting=!1,this.toast("Transaction has failed.",{type:"error",onClick:()=>window.open(this.$config.blockExplorerBaseUrl+"/tx/"+a.hash,"_blank").focus()}),console.log(e))}catch(a){console.error(a);try{let i=a.message.split("reason=")[1];i=i.split(", method=")[0],i=i.replace(/"/g,""),i=i.replace("execution reverted:","Error:"),console.log(i),this.toast(i,{type:"error"})}catch{this.toast("Transaction has failed.",{type:"error"})}this.waiting=!1}},insertImageLink(o){this.imageUrl=o}},setup(){const{signer:o}=k(),t=v();return{signer:o,toast:t}}},Ue=["aria-labelledby"],Te={class:"modal-dialog"},Ne={class:"modal-content"},Me={class:"modal-header"},Se=["id"],Fe=["id"],De={class:"modal-body"},Be=s("p",null,"Change your collection preview image.",-1),Pe={class:"mt-4"},$e={key:0},Ee=s("p",null,"Upload new image (and then click Submit below):",-1),Le=s("p",{class:"mt-3"},"Or paste image link here:",-1),Oe={key:1},Re={key:2,class:"mt-3"},We=s("br",null,null,-1),je=s("small",null,"If image didn't appear above, then something is wrong with the link you added (wait until the loading indicator completes). If you have an IPFS link, it also helps to cut/paste the same link a couple of times.",-1),ze={class:"modal-footer"},He=["disabled"],Ve={key:0,class:"spinner-border spinner-border-sm mx-1",role:"status","aria-hidden":"true"};function Ye(o,t,a,i,e,n){const d=f("FileUploadInput"),h=f("Image");return r(),l("div",{class:"modal fade",id:"changeCollectionPreviewModal",tabindex:"-1","aria-labelledby":"modalLabel-"+e.componentId,"aria-hidden":"true"},[s("div",Te,[s("div",Ne,[s("div",Me,[s("h1",{class:"modal-title fs-5",id:"modalLabel-"+e.componentId},"Change Collection Preview Image",8,Se),s("button",{id:"closeModal-"+e.componentId,type:"button",class:"btn-close","data-bs-dismiss":"modal","aria-label":"Close"},null,8,Fe)]),s("div",De,[Be,s("div",Pe,[!e.imageUrl&&o.$config.fileUploadEnabled?(r(),l("div",$e,[Ee,p(d,{btnCls:"btn btn-primary",storageType:"ipfs",maxFileSize:o.$config.fileUploadSizeLimit,onProcessUploadedFileUrl:n.insertImageLink},null,8,["maxFileSize","onProcessUploadedFileUrl"]),Le])):c("",!0),o.$config.fileUploadEnabled?c("",!0):(r(),l("p",Oe,"Paste image link here:")),A(s("input",{"onUpdate:modelValue":t[0]||(t[0]=g=>e.imageUrl=g),type:"text",class:"form-control"},null,512),[[x,e.imageUrl]]),e.imageUrl?(r(),l("div",Re,[p(h,{url:e.imageUrl,cls:"img-thumbnail img-fluid",style:{"max-width":"100px"}},null,8,["url"]),We,je])):c("",!0)])]),s("div",ze,[s("button",{onClick:t[1]||(t[1]=(...g)=>n.updateImage&&n.updateImage(...g)),type:"button",class:"btn btn-primary",disabled:!e.imageUrl||e.waiting},[e.waiting?(r(),l("span",Ve)):c("",!0),m(" Submit to blockchain ")],8,He)])])])],8,Ue)}const Ge=w(xe,[["render",Ye]]),qe={name:"ChangeDescriptionModal",props:["cAddress","cDescription","mdAddress"],emits:["saveCollection"],data(){return{componentId:null,editDescription:null,waiting:!1}},mounted(){this.componentId=this.$.uid,this.editDescription=this.cDescription},methods:{async update(){this.waiting=!0;const o=new _(["function setDescription(address nftAddress_, string memory description_) external"]),t=new b(this.mdAddress,o,this.signer);try{const a=await t.setDescription(this.cAddress,this.editDescription.replace(/"/g,"'")),i=this.toast({component:y,props:{text:"Please wait for your transaction to confirm. Click on this notification to see transaction in the block explorer."}},{type:"info",onClick:()=>window.open(this.$config.blockExplorerBaseUrl+"/tx/"+a.hash,"_blank").focus()}),e=await a.wait();e.status===1?(this.toast.dismiss(i),this.toast("You have updated the NFT description.",{type:"success",onClick:()=>window.open(this.$config.blockExplorerBaseUrl+"/tx/"+a.hash,"_blank").focus()}),this.$emit("saveCollection",{description:this.editDescription.replace(/"/g,"'")}),this.editDescription=null,document.getElementById("closeModal-"+this.componentId).click(),this.waiting=!1):(this.toast.dismiss(i),this.waiting=!1,this.toast("Transaction has failed.",{type:"error",onClick:()=>window.open(this.$config.blockExplorerBaseUrl+"/tx/"+a.hash,"_blank").focus()}),console.log(e))}catch(a){console.error(a);try{let i=a.message.split("reason=")[1];i=i.split(", method=")[0],i=i.replace(/"/g,""),i=i.replace("execution reverted:","Error:"),console.log(i),this.toast(i,{type:"error"})}catch{this.toast("Transaction has failed.",{type:"error"})}this.waiting=!1}}},setup(){const{signer:o}=k(),t=v();return{signer:o,toast:t}},watch:{cDescription(){this.editDescription=this.cDescription}}},Qe=["aria-labelledby"],Je={class:"modal-dialog"},Ke={class:"modal-content"},Xe={class:"modal-header"},Ze=["id"],et=["id"],tt={class:"modal-body"},st=s("p",null,"Change your collection description.",-1),it={class:"mt-4"},ot=["for"],nt=s("strong",null," Enter new description: ",-1),at=[nt],rt=["id"],lt={class:"modal-footer"},ct=s("button",{type:"button",class:"btn btn-secondary","data-bs-dismiss":"modal"},"Close",-1),dt=["disabled"],ht={key:0,class:"spinner-border spinner-border-sm mx-1",role:"status","aria-hidden":"true"};function mt(o,t,a,i,e,n){return r(),l("div",{class:"modal fade",id:"changeDescriptionModal",tabindex:"-1","aria-labelledby":"modalLabel-"+e.componentId,"aria-hidden":"true"},[s("div",Je,[s("div",Ke,[s("div",Xe,[s("h1",{class:"modal-title fs-5",id:"modalLabel-"+e.componentId},"Change description",8,Ze),s("button",{id:"closeModal-"+e.componentId,type:"button",class:"btn-close","data-bs-dismiss":"modal","aria-label":"Close"},null,8,et)]),s("div",tt,[st,s("div",it,[s("label",{for:"input-"+e.componentId,class:"form-label"},at,8,ot),A(s("input",{"onUpdate:modelValue":t[0]||(t[0]=d=>e.editDescription=d),type:"text",class:"form-control",id:"input-"+e.componentId},null,8,rt),[[x,e.editDescription]])])]),s("div",lt,[ct,s("button",{onClick:t[1]||(t[1]=(...d)=>n.update&&n.update(...d)),type:"button",class:"btn btn-primary",disabled:!e.editDescription||e.waiting},[e.waiting?(r(),l("span",ht)):c("",!0),m(" Submit ")],8,dt)])])])],8,Qe)}const ut=w(qe,[["render",mt]]),pt={name:"ChangeNftTypeModal",props:["cAddress","cType","mdAddress"],emits:["saveCollection"],data(){return{componentId:null,editImageMetadataUrl:null,editImageOptions:[{description:"0) Onchain image(s)"},{description:"1) Static metadata URL"},{description:"2) Generative metadata (.json)"},{description:"3) Generative metadata"}],editImagePreviewUrl:"",typeChoice:0,waitingMetadata:!1}},mounted(){this.componentId=this.$.uid},methods:{async updateMetadata(){this.waitingMetadata=!0;const o=new _(["function setMdTypeAndUrlOrImage(address nftAddress_, uint256 mdType_, string memory mdUrlOrImage_, string memory collectionImage_) external"]),t=new b(this.mdAddress,o,this.signer);this.typeChoice===0&&(this.editImagePreviewUrl=this.editImageMetadataUrl),this.editImagePreviewUrl===null&&(this.editImagePreviewUrl="");try{const a=await t.setMdTypeAndUrlOrImage(this.cAddress,this.typeChoice,this.editImageMetadataUrl,this.editImagePreviewUrl),i=this.toast({component:y,props:{text:"Please wait for your transaction to confirm. Click on this notification to see transaction in the block explorer."}},{type:"info",onClick:()=>window.open(this.$config.blockExplorerBaseUrl+"/tx/"+a.hash,"_blank").focus()}),e=await a.wait();e.status===1?(this.toast.dismiss(i),this.toast("You have updated the NFT image and/or metadata URL.",{type:"success",onClick:()=>window.open(this.$config.blockExplorerBaseUrl+"/tx/"+a.hash,"_blank").focus()}),this.$emit("saveCollection",{type:this.typeChoice,image:this.editImagePreviewUrl}),this.editImageMetadataUrl=null,this.editImagePreviewUrl="",document.getElementById("closeModal-"+this.componentId).click(),this.waitingMetadata=!1):(this.toast.dismiss(i),this.waitingMetadata=!1,this.toast("Transaction has failed.",{type:"error",onClick:()=>window.open(this.$config.blockExplorerBaseUrl+"/tx/"+a.hash,"_blank").focus()}),console.log(e))}catch(a){console.error(a);try{let i=a.message.split("reason=")[1];i=i.split(", method=")[0],i=i.replace(/"/g,""),i=i.replace("execution reverted:","Error:"),console.log(i),this.toast(i,{type:"error"})}catch{this.toast("Transaction has failed.",{type:"error"})}this.waitingMetadata=!1}}},setup(){const{signer:o}=k(),t=v();return{signer:o,toast:t}}},gt={class:"modal fade",id:"changeNftTypeModal",tabindex:"-1","aria-labelledby":"changeNftTypeModalLabel","aria-hidden":"true"},ft={class:"modal-dialog"},_t={class:"modal-content"},bt={class:"modal-header"},yt=s("h1",{class:"modal-title fs-5",id:"changeNftTypeModalLabel"},"Change NFT Type",-1),wt=["id"],vt={class:"modal-body"},kt=s("p",null,[s("strong",null,"Pick one of these options:")],-1),Ct={class:"dropdown"},It={class:"btn btn-primary dropdown-toggle",type:"button","data-bs-toggle":"dropdown","aria-expanded":"false"},At={class:"dropdown-menu text-break"},xt=["onClick"],Ut={class:"mt-3"},Tt={key:0},Nt={key:1},Mt=s("strong",null,"file",-1),St={key:2},Ft=s("strong",null,"folder",-1),Dt={key:3},Bt=s("strong",null,"folder",-1),Pt={class:"mt-4"},$t={for:"imageMetadataUrl",class:"form-label"},Et={key:0},Lt={key:1},Ot={key:2},Rt={key:3},Wt={key:0,class:"mt-4"},jt=s("label",{for:"collectionPreviewUrl",class:"form-label"},[s("strong",null," Change collection preview image (optional): ")],-1),zt=s("div",{id:"previewImageHelp",class:"form-text"}," This is a preview image for the whole collection, not for individual NFTs. ",-1),Ht={class:"modal-footer"},Vt=s("button",{type:"button",class:"btn btn-secondary","data-bs-dismiss":"modal"},"Close",-1),Yt=["disabled"],Gt={key:0,class:"spinner-border spinner-border-sm mx-1",role:"status","aria-hidden":"true"};function qt(o,t,a,i,e,n){return r(),l("div",gt,[s("div",ft,[s("div",_t,[s("div",bt,[yt,s("button",{id:"closeModal-"+e.componentId,type:"button",class:"btn-close","data-bs-dismiss":"modal","aria-label":"Close"},null,8,wt)]),s("div",vt,[s("p",null,"Current type of this NFT collection is: "+u(e.editImageOptions[a.cType].description)+".",1),kt,s("div",Ct,[s("button",It,u(e.editImageOptions[e.typeChoice].description),1),s("div",At,[(r(!0),l(N,null,$(e.editImageOptions,(d,h)=>(r(),l("span",{key:h,onClick:g=>e.typeChoice=h,class:"dropdown-item cursor-pointer"},u(d.description),9,xt))),128))])]),s("div",Ut,[e.typeChoice==0?(r(),l("p",Tt,' The "Onchain image(s)" option means that metadata is stored onchain (within the smart contract itself). Use this option if you want to add an image URL in the field below (not a metadata file). This is the default option for NFTs created through this launchpad. ')):c("",!0),e.typeChoice==1?(r(),l("p",Nt,[m(' The "Static metadata URL" option means that all the NFTs in the collection have the same (static) image and meta data. The metadata is stored offchain, usually on IPFS or on a centralized server. Use this option if you have a URL of a single metadata '),Mt,m(" (all NFTs have the same metadata and image). ")])):c("",!0),e.typeChoice==2?(r(),l("p",St,[m(' The "Generative metadata (.json)" option means that all the NFTs in the collection have a different image and different meta data. The metadata is stored offchain, usually on IPFS or on a centralized server. Use this option if you have a metadata '),Ft,m(" URL with multiple metadata files in it, where these files HAVE a .json extension. ")])):c("",!0),e.typeChoice==3?(r(),l("p",Dt,[m(' The "Generative metadata" option means that all the NFTs in the collection have a different image and different meta data. The metadata is stored offchain, usually on IPFS or on a centralized server. Use this option if you have a metadata '),Bt,m(" URL with multiple metadata files in it, where these files DO NOT HAVE a .json extension. ")])):c("",!0)]),s("div",Pt,[s("label",$t,[s("strong",null,[m(" Enter "),e.typeChoice==0?(r(),l("span",Et,"image URL:")):c("",!0),e.typeChoice==1?(r(),l("span",Lt,"metadata file URL:")):c("",!0),e.typeChoice==2?(r(),l("span",Ot,"metadata folder URL:")):c("",!0),e.typeChoice==3?(r(),l("span",Rt,"metadata folder URL:")):c("",!0)])]),A(s("input",{"onUpdate:modelValue":t[0]||(t[0]=d=>e.editImageMetadataUrl=d),type:"text",class:"form-control",id:"imageMetadataUrl"},null,512),[[x,e.editImageMetadataUrl]])]),e.typeChoice>0?(r(),l("div",Wt,[jt,A(s("input",{"onUpdate:modelValue":t[1]||(t[1]=d=>e.editImagePreviewUrl=d),type:"text",class:"form-control",id:"collectionPreviewUrl","aria-describedby":"previewImageHelp"},null,512),[[x,e.editImagePreviewUrl]]),zt])):c("",!0)]),s("div",Ht,[Vt,s("button",{onClick:t[2]||(t[2]=(...d)=>n.updateMetadata&&n.updateMetadata(...d)),type:"button",class:"btn btn-primary",disabled:!e.editImageMetadataUrl||e.waitingMetadata},[e.waitingMetadata?(r(),l("span",Gt)):c("",!0),m(" Submit ")],8,Yt)])])])])}const Qt=w(pt,[["render",qt]]),Jt={name:"RemoveImageFromCollectionModal",props:["cAddress","mdAddress"],data(){return{componentId:null,images:[],imageUrl:null,waitingLoad:!1,waitingRemove:!1}},components:{Image:U},mounted(){this.componentId=this.$.uid},methods:{async loadImages(){this.waitingLoad=!0;const o=new _(["function getCollectionImages(address nftAddress_) external view returns (string[] memory)"]),t=new b(this.mdAddress,o,this.signer);try{this.images=await t.getCollectionImages(this.cAddress),this.waitingLoad=!1}catch(a){console.error(a),this.waitingLoad=!1}},async removeImage(o){this.waitingRemove=!0;const t=new _(["function removeImageFromCollectionByIndex(address nftAddress_, uint256 index_) external"]),a=new b(this.mdAddress,t,this.signer);try{const i=await a.removeImageFromCollectionByIndex(this.cAddress,o),e=this.toast({component:y,props:{text:"Please wait for your transaction to confirm. Click on this notification to see transaction in the block explorer."}},{type:"info",onClick:()=>window.open(this.$config.blockExplorerBaseUrl+"/tx/"+i.hash,"_blank").focus()}),n=await i.wait();if(n.status===1){this.toast.dismiss(e),this.toast("You have successfully removed an image from the NFT collection.",{type:"success",onClick:()=>window.open(this.$config.blockExplorerBaseUrl+"/tx/"+i.hash,"_blank").focus()}),this.imageUrl=null;const d=[...this.images];d.splice(o,1),this.images=d,this.waitingRemove=!1}else this.toast.dismiss(e),this.waitingRemove=!1,this.toast("Transaction has failed.",{type:"error",onClick:()=>window.open(this.$config.blockExplorerBaseUrl+"/tx/"+i.hash,"_blank").focus()}),console.log(n)}catch(i){console.error(i);try{let e=i.message.split("reason=")[1];e=e.split(", method=")[0],e=e.replace(/"/g,""),e=e.replace("execution reverted:","Error:"),console.log(e),this.toast(e,{type:"error"})}catch{this.toast("Transaction has failed.",{type:"error"})}this.waitingRemove=!1}}},setup(){const{signer:o}=k(),t=v();return{signer:o,toast:t}}},Kt=["aria-labelledby"],Xt={class:"modal-dialog"},Zt={class:"modal-content"},es={class:"modal-header"},ts=["id"],ss=["id"],is={class:"modal-body"},os={class:"row"},ns=["for"],as=s("strong",null," Load images from collection: ",-1),rs=[as],ls=["disabled"],cs={key:0,class:"spinner-border spinner-border-sm",role:"status","aria-hidden":"true"},ds={key:0,class:"row mt-3"},hs={class:"card"},ms={class:"card-body"},us={class:"row"},ps=["onClick","disabled"],gs=s("div",{class:"modal-footer"},[s("button",{type:"button",class:"btn btn-secondary","data-bs-dismiss":"modal"},"Close")],-1);function fs(o,t,a,i,e,n){const d=f("Image");return r(),l("div",{class:"modal fade",id:"removeImageFromCollectionModal",tabindex:"-1","aria-labelledby":"modalLabel-"+e.componentId,"aria-hidden":"true"},[s("div",Xt,[s("div",Zt,[s("div",es,[s("h1",{class:"modal-title fs-5",id:"modalLabel-"+e.componentId},"Remove Image From Collection",8,ts),s("button",{id:"closeModal-"+e.componentId,type:"button",class:"btn-close","data-bs-dismiss":"modal","aria-label":"Close"},null,8,ss)]),s("div",is,[s("div",os,[s("label",{for:"input-"+e.componentId,class:"form-label"},rs,8,ns)]),s("div",null,[s("button",{class:"btn btn-primary",onClick:t[0]||(t[0]=(...h)=>n.loadImages&&n.loadImages(...h)),disabled:e.waitingLoad},[e.waitingLoad?(r(),l("span",cs)):c("",!0),m(" Load images ")],8,ls)]),e.images?(r(),l("div",ds,[(r(!0),l(N,null,$(e.images,(h,g)=>(r(),l("div",{key:h,class:"col-md-4 mb-3"},[s("div",hs,[p(d,{url:h,alt:"Image",cls:"card-img-top"},null,8,["url"]),s("div",ms,[s("div",us,[s("button",{class:"btn btn-danger",onClick:M=>n.removeImage(g),disabled:e.waitingRemove||e.images.length==1}," Delete ",8,ps)])])])]))),128))])):c("",!0)]),gs])])],8,Kt)}const _s=w(Jt,[["render",fs]]),bs={name:"NftCollection",data(){return{cAuthorAddress:null,cAuthorDomain:null,cDescription:null,cImage:null,cName:null,cSupply:null,cType:0,mdAddress:null,nativeNft:!0,priceBuyWei:null,priceSellWei:null,userTokenId:null,waitingBuy:!1,waitingData:!1,waitingSell:!1}},components:{AddImageToCollectionModal:Ae,ChangeCollectionPreviewModal:Ge,ChangeDescriptionModal:ut,ChangeNftTypeModal:Qt,ChatFeed:Z,ConnectWalletButton:ee,Image:U,RemoveImageFromCollectionModal:_s,SwitchChainButton:te,WaitingToast:y},mounted(){if(this.cAddress){if(!S(this.cAddress))return this.toast("Invalid NFT address.",{type:"error"}),this.$router.push({path:"/"});this.getCollectionDetails()}},computed:{cAddress(){return this.$route.query?.id?this.$route.query.id:null},getUsernameOrFullAddress(){if(this.cAuthorDomain){let o=String(this.cAuthorDomain).replace(this.$config.tldName,"");return P(o)+this.$config.tldName}else return this.cAuthorAddress},getUsernameOrShortAddress(){if(this.cAuthorAddress)if(this.cAuthorDomain){let o=String(this.cAuthorDomain).replace(this.$config.tldName,"");return P(o)+this.$config.tldName}else return F(this.cAuthorAddress);return null},isCurrentAddressOwner(){return this.cAuthorAddress&&this.address?String(this.cAuthorAddress).toLowerCase()===String(this.address).toLowerCase():!1},isSupportedChain(){return this.chainId===this.$config.supportedChainId}},methods:{getDomainName:se,async buyNft(){this.waitingBuy=!0;const o=new _(["function getBurnPrice() public view returns (uint256)","function getMintPrice() public view returns (uint256)","function mint(address to) external payable returns (uint256)","function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256)","function totalSupply() public view returns (uint256)"]),t=new b(this.cAddress,o,this.signer);this.priceBuyWei=await t.getMintPrice();try{const a=await t.mint(this.address,{value:this.priceBuyWei}),i=this.toast({component:y,props:{text:"Please wait for your transaction to confirm. Click on this notification to see transaction in the block explorer."}},{type:"info",onClick:()=>window.open(this.$config.blockExplorerBaseUrl+"/tx/"+a.hash,"_blank").focus()}),e=await a.wait();if(e.status===1){this.toast.dismiss(i),this.toast("You have successfully bought the NFT! Congrats!",{type:"success",onClick:()=>window.open(this.$config.blockExplorerBaseUrl+"/tx/"+a.hash,"_blank").focus()}),this.priceBuyWei=await t.getMintPrice(),this.priceSellWei=await t.getBurnPrice();try{this.userTokenId=await t.tokenOfOwnerByIndex(this.address,0)}catch{this.userTokenId=null}this.cSupply=await t.totalSupply(),this.waitingBuy=!1}else this.toast.dismiss(i),this.waitingBuy=!1,this.toast("Transaction has failed.",{type:"error",onClick:()=>window.open(this.$config.blockExplorerBaseUrl+"/tx/"+a.hash,"_blank").focus()}),console.log(e)}catch(a){console.error(a);try{let i=a.message.split("reason=")[1];i=i.split(", method=")[0],i=i.replace(/"/g,""),i=i.replace("execution reverted:","Error:"),console.log(i),this.toast(i,{type:"error"})}catch{this.toast("Transaction has failed.",{type:"error"})}this.waitingBuy=!1}},async fetchUserDomain(){if(this.cAuthorAddress){const o=await this.getDomainName(this.cAuthorAddress);o&&(this.cAuthorDomain=o,ie(window,this.cAuthorAddress,o+this.$config.tldName))}},formatPrice(o){if(o===null)return null;const t=Number(J(o));return t>100?t.toFixed(0):t>1?t.toFixed(2):t>.1?t.toFixed(4):t>.01?t.toFixed(5):t>.001?t.toFixed(6):t>1e-4?t.toFixed(7):t>1e-5?t.toFixed(8):t>1e-6?t.toFixed(9):t},async getCollectionDetails(o=!1){this.waitingData=!0;let t=oe(window,this.cAddress);o&&(console.log("Refreshing collection metadata..."),t=null);let a=this.$getFallbackProvider(this.$config.supportedChainId);this.isActivated&&this.chainId===this.$config.supportedChainId&&(a=this.signer);const i=new _(["function getBurnPrice() public view returns (uint256)","function getMintPrice() public view returns (uint256)","function metadataAddress() public view returns (address)","function name() public view returns (string memory)","function owner() public view returns (address)","function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256)","function totalSupply() public view returns (uint256)"]),e=new b(this.cAddress,i,a);if(console.log("Fetching collection details..."),t?.mdAddress)this.mdAddress=t.mdAddress;else try{this.mdAddress=await e.metadataAddress()}catch{return this.getCollectionDetailsFallback()}const n=new _(["function getCollectionDescription(address) public view returns (string memory)","function getCollectionMetadataType(address nftAddress_) external view returns (uint256)","function getCollectionPreviewImage(address) public view returns (string memory)"]),d=new b(this.mdAddress,n,a);try{this.priceBuyWei=await e.getMintPrice(),this.priceSellWei=await e.getBurnPrice()}catch{return this.getCollectionDetailsFallback()}if(t?.image?this.cImage=t.image:this.cImage=await d.getCollectionPreviewImage(this.cAddress),this.cImage.includes(".ipfs.sphn.link/")){const h=this.cImage.split(".ipfs.sphn.link/"),g=h[0].replace("https://","");this.cImage=this.$config.ipfsGateway+g+"/"+h[1]}t?.description&&t.description!==""&&t.description!==null?this.cDescription=t.description:this.cDescription=await d.getCollectionDescription(this.cAddress),t?.type>=0?this.cType=t.type:this.cType=Number(await d.getCollectionMetadataType(this.cAddress)),t?.name?this.cName=t.name:this.cName=await e.name();try{this.userTokenId=await e.tokenOfOwnerByIndex(this.address,0)}catch{this.userTokenId=null}this.waitingData=!1,this.cSupply=await e.totalSupply(),t?.authorAddress?(this.cAuthorAddress=t.authorAddress,this.cAuthorDomain=t.authorDomain):this.cAuthorAddress=await e.owner(),this.cAuthorDomain=D(window,this.cAuthorAddress),this.cAuthorDomain||this.fetchUserDomain(),t={address:this.cAddress,authorAddress:this.cAuthorAddress,authorDomain:this.cAuthorDomain,description:this.cDescription,image:this.cImage,mdAddress:this.mdAddress,name:this.cName,type:this.cType},B(window,this.cAddress,t)},async getCollectionDetailsFallback(){console.log("Fetching collection details via fallback method..."),this.nativeNft=!1;let o=this.$getFallbackProvider(this.$config.supportedChainId);this.isActivated&&this.chainId===this.$config.supportedChainId&&(o=this.signer);const t=new _(["function name() public view returns (string memory)","function owner() public view returns (address)","function tokenURI(uint256 tokenId) public view returns (string memory)","function totalSupply() public view returns (uint256)","function uri(uint256 tokenId) public view returns (string memory)"]),a=new b(this.cAddress,t,o);this.cName=await a.name();let i;try{i=await a.tokenURI(1)}catch{i=await a.uri(1)}if(i.startsWith("data:application/json;")){const e=JSON.parse(atob(i.replace("data:application/json;base64,","")));!this.cName&&e?.name&&(this.cName=e.name.replace("#1","")),e?.description&&(this.cDescription=e.description),e?.image&&(this.cImage=e.image),e?.external_url&&(this.cExternalUrl=e.external_url),e?.audio_url&&(this.audioUrl=e.audio_url),e?.animation_url&&(this.videoUrl=e.animation_url),e?.youtube_url&&(this.youtubeUrl=e.youtube_url)}else try{const n=(await axios.get(i)).data;!this.cName&&n?.name&&(this.cName=n.name.replace("#1","")),n?.description&&(this.cDescription=n.description),n?.image&&(this.cImage=n.image),n?.external_url&&(this.cExternalUrl=n.external_url),n?.audio_url&&(this.audioUrl=n.audio_url),n?.animation_url&&(this.videoUrl=n.animation_url),n?.youtube_url&&(this.youtubeUrl=n.youtube_url)}catch(e){console.error(e)}try{this.cSupply=await a.totalSupply()}catch{console.log("No totalSupply function in the contract.")}try{this.cAuthorAddress=await a.owner(),this.cAuthorDomain=D(window,this.cAuthorAddress),this.cAuthorDomain||this.fetchUserDomain()}catch{console.log("No owner variable in the contract.")}this.waitingData=!1},saveCollection(o){o?.type&&(this.cType=o.type),o?.description&&(this.cDescription=o.description),o?.image&&(this.cImage=o.image);const t={address:this.cAddress,authorAddress:this.cAuthorAddress,authorDomain:this.cAuthorDomain,description:this.cDescription,image:this.cImage,mdAddress:this.mdAddress,name:this.cName,type:this.cType};B(window,this.cAddress,t)},async sellNft(){this.waitingSell=!0;const o=new _(["function getBurnPrice() public view returns (uint256)","function getMintPrice() public view returns (uint256)","function burn(uint256 tokenId) external returns (uint256)","function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256)","function totalSupply() public view returns (uint256)"]),t=new b(this.cAddress,o,this.signer);try{const a=await t.burn(this.userTokenId),i=this.toast({component:y,props:{text:"Please wait for your transaction to confirm. Click on this notification to see transaction in the block explorer."}},{type:"info",onClick:()=>window.open(this.$config.blockExplorerBaseUrl+"/tx/"+a.hash,"_blank").focus()}),e=await a.wait();if(e.status===1){this.toast.dismiss(i),this.toast("You have dumped the NFT.",{type:"success",onClick:()=>window.open(this.$config.blockExplorerBaseUrl+"/tx/"+a.hash,"_blank").focus()}),this.priceBuyWei=await t.getMintPrice(),this.priceSellWei=await t.getBurnPrice();try{this.userTokenId=await t.tokenOfOwnerByIndex(this.address,0)}catch{this.userTokenId=null}this.cSupply=await t.totalSupply(),this.waitingSell=!1}else this.toast.dismiss(i),this.waitingSell=!1,this.toast("Transaction has failed.",{type:"error",onClick:()=>window.open(this.$config.blockExplorerBaseUrl+"/tx/"+a.hash,"_blank").focus()}),console.log(e)}catch(a){console.error(a);try{let i=a.message.split("reason=")[1];i=i.split(", method=")[0],i=i.replace(/"/g,""),i=i.replace("execution reverted:","Error:"),console.log(i),this.toast(i,{type:"error"})}catch{this.toast("Transaction has failed.",{type:"error"})}this.waitingSell=!1}}},setup(){const{address:o,chainId:t,isActivated:a,signer:i}=k(),e=v();return{address:o,chainId:t,isActivated:a,shortenAddress:F,signer:i,toast:e}},watch:{address(o,t){t&&t!==o&&!this.waitingData&&this.getCollectionDetails()},chainId(o,t){o==this.$config.supportedChainId&&t!==o&&!this.waitingData&&this.getCollectionDetails()},cAddress(o,t){if(o&&t&&o!==t&&this.cAddress&&this.$route.path==="/nft/collection"){if(!S(this.cAddress))return this.toast("Invalid NFT address.",{type:"error"}),this.$router.push({path:"/"});this.getCollectionDetails()}}}},ys={class:"card border"},ws={class:"card-body"},vs={class:"fs-3"},ks={key:0,class:"mb-3 mt-3"},Cs={key:1,class:"mb-3 mt-3"},Is={key:2,class:"d-flex justify-content-center mb-3"},As=s("span",{class:"spinner-border spinner-border-lg",role:"status","aria-hidden":"true"},null,-1),xs=[As],Us={class:"row"},Ts={class:"col-md-5 text-center mb-3"},Ns={key:1,class:"dropdown mt-3"},Ms=s("button",{class:"btn btn-outline-primary btn-sm dropdown-toggle",type:"button","data-bs-toggle":"dropdown","aria-expanded":"false"}," Actions ",-1),Ss={class:"dropdown-menu"},Fs={key:0},Ds=s("span",{class:"dropdown-item cursor-pointer","data-bs-toggle":"modal","data-bs-target":"#changeDescriptionModal"}," Change description ",-1),Bs=[Ds],Ps={key:1},$s=s("span",{class:"dropdown-item cursor-pointer","data-bs-toggle":"modal","data-bs-target":"#changeCollectionPreviewModal"}," Change collection preview image ",-1),Es=[$s],Ls={key:2},Os=s("span",{class:"dropdown-item cursor-pointer","data-bs-toggle":"modal","data-bs-target":"#addImageToCollectionModal"}," Add additional image to collection ",-1),Rs=[Os],Ws={key:3},js=s("span",{class:"dropdown-item cursor-pointer","data-bs-toggle":"modal","data-bs-target":"#removeImageFromCollectionModal"}," Remove image from collection ",-1),zs=[js],Hs={key:4},Vs=s("span",{class:"dropdown-item cursor-pointer","data-bs-toggle":"modal","data-bs-target":"#changeNftTypeModal"}," Change collection type ",-1),Ys=[Vs],Gs={class:"col-md-7"},qs={class:"mt-1 mb-4 muted-text",style:{"font-size":"14px"}},Qs={class:"me-4"},Js=s("i",{class:"bi bi-file-earmark-text-fill me-1"},null,-1),Ks={key:0,class:"me-4"},Xs=s("i",{class:"bi bi-coin me-1"},null,-1),Zs={class:"me-4"},ei=s("i",{class:"bi bi-file-earmark-binary me-1"},null,-1),ti={class:"me-4"},si=s("i",{class:"bi bi-box-arrow-up-right me-2"},null,-1),ii=["href"],oi={key:0},ni={class:"me-4"},ai=s("i",{class:"bi bi-box-arrow-up-right me-1"},null,-1),ri=["href"],li={key:0,class:"row mb-3"},ci={key:0,class:"d-grid gap-2 col"},di={key:1,class:"d-grid gap-2 col"},hi=["disabled"],mi={key:0,class:"spinner-border spinner-border-sm mx-1",role:"status","aria-hidden":"true"},ui={key:2,class:"d-grid gap-2 col"},pi=["disabled"],gi={key:0,class:"spinner-border spinner-border-sm mx-1",role:"status","aria-hidden":"true"},fi={key:1},_i={key:0,class:"card border mt-3 scroll-500"},bi=X('<div class="card-body"><h5 class="mb-2 mt-3 text-center">Buy an NFT to see the chat</h5><div class="d-flex justify-content-center"><div class="col-12 col-lg-8"><p class="text-break text-center mt-3 mb-4"> This NFT&#39;s chat is open only for NFT holders. Buy an NFT to see the chat and talk with the NFT creator and other NFT holders. </p></div></div></div>',1),yi=[bi];function wi(o,t,a,i,e,n){const d=q,h=Q,g=G,M=f("Image"),L=K,O=f("ConnectWalletButton"),R=f("SwitchChainButton"),W=f("ChatFeed"),j=f("AddImageToCollectionModal"),z=f("ChangeCollectionPreviewModal"),H=f("ChangeDescriptionModal"),V=f("ChangeNftTypeModal"),Y=f("RemoveImageFromCollectionModal");return r(),l(N,null,[p(g,null,{default:T(()=>[p(d,null,{default:T(()=>[m("NFT Collection Details | "+u(o.$config.projectMetadataTitle),1)]),_:1}),p(h,{property:"og:title",content:"NFT Collection Details | "+o.$config.projectMetadataTitle},null,8,["content"]),p(h,{name:"description",content:"Check this NFT collection on "+o.$config.projectName+"!"},null,8,["content"]),p(h,{property:"og:image",content:o.$config.projectUrl+o.$config.previewImageNftCollection},null,8,["content"]),p(h,{property:"og:description",content:"Check this NFT collection on "+o.$config.projectName+"!"},null,8,["content"]),p(h,{name:"twitter:image",content:o.$config.projectUrl+o.$config.previewImageNftCollection},null,8,["content"]),p(h,{name:"twitter:description",content:"Check this NFT collection on "+o.$config.projectName+"!"},null,8,["content"])]),_:1}),s("div",ys,[s("div",ws,[s("p",vs,[s("i",{onClick:t[0]||(t[0]=C=>o.$router.push({path:"/nft"})),class:"bi bi-arrow-left-circle cursor-pointer"})]),e.cName?c("",!0):(r(),l("h3",ks,"NFT Collection Details")),e.cName?(r(),l("h3",Cs,u(e.cName),1)):c("",!0),e.waitingData?(r(),l("div",Is,xs)):c("",!0),s("div",Us,[s("div",Ts,[e.cImage?(r(),I(M,{url:e.cImage,cls:"img-fluid img-thumbnail rounded col-12",alt:e.cName,key:e.cImage},null,8,["url","alt"])):c("",!0),e.nativeNft?(r(),l("div",Ns,[Ms,s("ul",Ss,[n.isCurrentAddressOwner?(r(),l("li",Fs,Bs)):c("",!0),n.isCurrentAddressOwner?(r(),l("li",Ps,Es)):c("",!0),n.isCurrentAddressOwner&&e.cType==0?(r(),l("li",Ls,Rs)):c("",!0),n.isCurrentAddressOwner&&e.cType==0?(r(),l("li",Ws,zs)):c("",!0),n.isCurrentAddressOwner?(r(),l("li",Hs,Ys)):c("",!0),s("li",null,[s("span",{class:"dropdown-item cursor-pointer",onClick:t[1]||(t[1]=C=>n.getCollectionDetails(!0))},"Refresh metadata")])])])):c("",!0)]),s("div",Gs,[s("div",qs,[s("p",Qs,[Js,m(" "+u(e.cDescription),1)]),e.nativeNft?(r(),l("p",Ks,[Xs,m(" Buy/Sell price: "+u(n.formatPrice(e.priceBuyWei))+" "+u(o.$config.tokenSymbol)+" / "+u(n.formatPrice(e.priceSellWei))+" "+u(o.$config.tokenSymbol),1)])):c("",!0),s("p",Zs,[ei,m(" "+u(e.cSupply)+" NFTs minted ",1)]),s("p",ti,[si,s("a",{href:o.$config.blockExplorerBaseUrl+"/address/"+n.cAddress,target:"_blank",style:{"text-decoration":"none"}},u(i.shortenAddress(n.cAddress)),9,ii),n.getUsernameOrShortAddress?(r(),l("span",oi,[m(" by "),p(L,{to:"/profile/?id="+String(n.getUsernameOrFullAddress)},{default:T(()=>[m(u(n.getUsernameOrShortAddress),1)]),_:1},8,["to"])])):c("",!0)]),s("p",ni,[ai,s("a",{href:o.$config.marketplaceNftCollectionBaseUrl+n.cAddress,target:"_blank",style:{"text-decoration":"none"}}," See on NFT marketplace ",8,ri)])]),e.nativeNft?(r(),l("div",li,[!i.isActivated||!n.isSupportedChain?(r(),l("div",ci,[i.isActivated?c("",!0):(r(),I(O,{key:0,class:"btn btn-primary",btnText:"Connect wallet"})),i.isActivated&&!n.isSupportedChain?(r(),I(R,{key:1})):c("",!0)])):c("",!0),i.isActivated&&n.isSupportedChain?(r(),l("div",di,[s("button",{onClick:t[2]||(t[2]=(...C)=>n.buyNft&&n.buyNft(...C)),class:"btn btn-primary",type:"button",disabled:e.waitingData||e.waitingBuy},[e.waitingBuy?(r(),l("span",mi)):c("",!0),m(" Buy for "+u(n.formatPrice(e.priceBuyWei))+" "+u(o.$config.tokenSymbol),1)],8,hi)])):c("",!0),i.isActivated&&n.isSupportedChain?(r(),l("div",ui,[s("button",{onClick:t[3]||(t[3]=(...C)=>n.sellNft&&n.sellNft(...C)),class:"btn btn-primary",type:"button",disabled:e.waitingData||e.waitingSell||!e.userTokenId||e.priceSellWei==0},[e.waitingSell?(r(),l("span",gi)):c("",!0),m(" Sell for "+u(n.formatPrice(e.priceSellWei))+" "+u(o.$config.tokenSymbol),1)],8,pi)])):c("",!0)])):c("",!0),i.isActivated&&n.isSupportedChain&&e.nativeNft?(r(),l("small",fi,[s("em",null," (Price may still change after pressing the button, so make sure to check the "+u(o.$config.tokenSymbol)+" amount in wallet.) ",1)])):c("",!0)])])])]),!e.userTokenId&&e.nativeNft?(r(),l("div",_i,yi)):c("",!0),o.$config.chatChannels.nftLaunchpad&&e.userTokenId?(r(),I(W,{key:n.cAddress,class:"mt-3 scroll-500",showQuotedPost:o.$config.showRepliesOnHomepage,orbisContext:o.$config.chatChannels.nftLaunchpad+":"+n.cAddress},null,8,["showQuotedPost","orbisContext"])):c("",!0),p(j,{cAddress:n.cAddress,mdAddress:e.mdAddress},null,8,["cAddress","mdAddress"]),p(z,{cAddress:n.cAddress,mdAddress:e.mdAddress,onSaveCollection:n.saveCollection},null,8,["cAddress","mdAddress","onSaveCollection"]),p(H,{cAddress:n.cAddress,cDescription:e.cDescription,mdAddress:e.mdAddress,onSaveCollection:n.saveCollection},null,8,["cAddress","cDescription","mdAddress","onSaveCollection"]),p(V,{mdAddress:e.mdAddress,cType:e.cType,cAddress:n.cAddress,onSaveCollection:n.saveCollection},null,8,["mdAddress","cType","cAddress","onSaveCollection"]),p(Y,{mdAddress:e.mdAddress,cAddress:n.cAddress},null,8,["mdAddress","cAddress"])],64)}const Li=w(bs,[["render",wi]]);export{Li as default};
